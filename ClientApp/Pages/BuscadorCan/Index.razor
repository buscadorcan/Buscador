@page "/"
@page "/persona"
@using ClientApp.Services.IService
@using ClientApp.Models;
@using Newtonsoft.Json;

<PageTitle>Buscador Andino</PageTitle>

<Modal @ref="modal" Size="ModalSize.ExtraLarge"/>

<div class="search-area-wrapper">
    <div class="search-area container">
        <h3 class="search-header">BUSCADOR SERVICIOS DE EVALUACIÃ“N DE LA CONFORMIDAD ACREDITADOS EN LA CAN</h3>

        <EditForm Model="buscarRequest" OnValidSubmit="BuscarPalabraRequest" id="search-form" class="search-form clearfix" autocomplete="off">
            <InputText @bind-Value="buscarRequest.TextoBuscar" class="search-term required" type="text" style="box-sizing: content-box" placeholder="Ingrese Texto a buscar" />
            <input class="search-btn" type="submit" value="Buscar" />
            <div id="search-error-container"></div>
        </EditForm>
    </div>
</div>

<div class="page-container">
    <div class="container">
        <div class="row">

            <div class="span12 page-content">
                <div class="row-fluid">

                    @if (listadeOpciones != null) {
                        @for (int i = 0; i < listadeOpciones.Count; i += 1) {
                            var currentIndex = i;
                            <div class="span2">
                                <Dropdown AutoClose="true" style="max-width: 100%; min-width: 100%">
                                    <DropdownToggleButton Color="ButtonColor.Secondary">
                                        @listaEtiquetasFiltros[currentIndex].MostrarWeb
                                    </DropdownToggleButton>
                                    <DropdownMenu>
                                        @foreach (var opcion in listadeOpciones[currentIndex]) {
                                            <DropdownItem @onclick="() => CambiarSeleccion(opcion.IdHomologacion, currentIndex)">
                                                @if (selectedValues != null && selectedValues.Count > currentIndex && selectedValues[currentIndex].Contains(opcion.IdHomologacion))
                                                {
                                                    <Icon Name="IconName.Check" />
                                                }
                                                @opcion.MostrarWeb
                                            </DropdownItem>
                                        }
                                    </DropdownMenu>
                                </Dropdown>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>

        <div class="py-2">
            @if (listaEtiquetasGrilla != null)
            {
                <Grid @ref="grid" TItem="DataHomologacionEsquema" class="table table-hover table-bordered table-striped" DataProvider="ResultadoBusquedaDataProvider" Responsive="true" AllowSorting="true">
                    @foreach(var etiqueta in listaEtiquetasGrilla.OrderBy(c => c.MostrarWebOrden)) {
                        <GridColumn TItem="DataHomologacionEsquema" PropertyName="@etiqueta.MostrarWeb" SortString="@etiqueta.MostrarWeb">
                            <HeaderContent>
                                <Tooltip Title="@etiqueta.TooltipWeb">@etiqueta.MostrarWeb</Tooltip>
                            </HeaderContent>
                            <ChildContent>
                                @context?.DataEsquemaJson?.FirstOrDefault(f => f.IdHomologacion == etiqueta.IdHomologacion)?.Data
                            </ChildContent>
                        </GridColumn>
                    }
                    <GridColumn TItem="DataHomologacionEsquema" HeaderText="-">
                        <Button Color="ButtonColor.Secondary" Outline="true" Size="Size.Small" @onclick="() => showModal(context)">
                            <Icon Name="IconName.Front" />
                        </Button>
                    </GridColumn>
                    <GridColumn TItem="DataHomologacionEsquema" HeaderText="-">
                        <Button Color="ButtonColor.Secondary" Outline="true" Size="Size.Small">
                            <Icon Name="IconName.FileTypePdf" />
                        </Button>
                    </GridColumn>
                </Grid>
            }
        </div>
    </div>
</div>