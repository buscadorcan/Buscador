@page "/"
@page "/persona"
@using SharedApp.Models.Dtos;
@using SharedApp.Data;
@using Newtonsoft.Json;

<PageTitle>Buscador Andino</PageTitle>

<div class="search-area-wrapper">
    <div class="search-area container">
        <h3 class="search-header">BUSCADOR SERVICIOS DE EVALUACIÃ“N DE LA CONFORMIDAD ACREDITADOS EN LA CAN</h3>

        <EditForm Model="buscarRequest" OnValidSubmit="BuscarPalabraRequest" id="search-form" class="search-form clearfix" autocomplete="off">
            <AutoComplete @bind-Value="buscarRequest.TextoBuscar"
                TItem="FnPredictWordsDto"
                DataProvider="FnPredictWordsDtoDataProvider"
                PropertyName="Word"
                Placeholder="Ingrese Texto a buscar..."
                OnChanged="(FnPredictWordsDto Word) => OnAutoCompleteChanged(Word)"
            />
            <br />
            <input type="checkbox" @onchange="async (e) => await BuscarPalabraRequest((bool) e.Value ? 1 : 0)" />
            <span style="color: #fff;">Busqueda Exacta</span>
            <Button Color="ButtonColor.Secondary" @onclick="async () => await BuscarPalabraRequest()">
              Buscar
            </Button>
        </EditForm>
    </div>
</div>

<div class="page-container">
    <div class="container">
        <div class="row">

            <div class="span12 page-content">
                <div class="row-fluid">

                    @if (listadeOpciones != null) {
                        @for (int i = 0; i < listadeOpciones.Count; i += 1) {
                            var currentIndex = i;
                            <div class="span2">
                                <Dropdown AutoClose="true" style="max-width: 100%; min-width: 100%">
                                    <DropdownToggleButton Color="ButtonColor.Secondary">
                                        @listaEtiquetasFiltros?[currentIndex].MostrarWeb
                                    </DropdownToggleButton>
                                    <DropdownMenu>
                                        @if (listadeOpciones?[currentIndex] != null) {
                                            var listaTmp = selectedValues.FirstOrDefault(c => c.Id == listaEtiquetasFiltros?[currentIndex].IdHomologacion);
                                            foreach (var opcion in listadeOpciones[currentIndex] ?? []) {
                                                <DropdownItem @onclick="() => CambiarSeleccion(opcion.MostrarWeb, listaEtiquetasFiltros?[currentIndex].IdHomologacion)">
                                                    @if (listaTmp != null && listaTmp.Seleccion.Contains(opcion.MostrarWeb))
                                                    {
                                                        <Icon Name="IconName.Check" />
                                                    }
                                                    @opcion.MostrarWeb
                                                </DropdownItem>
                                            }
                                        }
                                    </DropdownMenu>
                                </Dropdown>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
        <IndexGrilla
            @ref="childComponentRef"
            buscarRequest="@buscarRequest"
            selectedValues="@selectedValues"
            listaEtiquetasFiltros="@listaEtiquetasFiltros"
        />
    </div>
</div>