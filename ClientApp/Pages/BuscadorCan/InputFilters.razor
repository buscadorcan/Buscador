@inject NavigationManager Navigation


<div class="header-filtros-avanzados padding-0-30">
    <p class="inter-regular" onclick="toggleFilters()">Filtros avanzados</p>
    <div class="content-grid-filtros panel-input-filters-content">
        @if (listadeOpciones != null)
        {
            @for (int i = 0; i < listadeOpciones.Count; i++)
            {
                var currentIndex = i;
                <div class="form-check-label" style="margin-bottom: 0.5rem;">
                    <label for="select-@currentIndex"
                           class="visually-hidden"
                           title="@listaEtiquetasFiltros?[currentIndex]?.TooltipWeb">
                        @listaEtiquetasFiltros?[currentIndex]?.MostrarWeb
                    </label>
                    <div class="filter-content">
                        <button class="btn dropdown-toggle custom-bg @(selectedValues.Any(f => f.CodigoHomologacion == listaEtiquetasFiltros?[currentIndex]?.CodigoHomologacion && f.Seleccion.Count > 0) ? "selected-filter" : "")"
                                style="font-size: 12px;"
                                type="button"
                                id="dropdownMenuButton-@currentIndex"
                                data-bs-toggle="dropdown"
                                aria-expanded="false">
                            Seleccionar @listaEtiquetasFiltros?[currentIndex]?.MostrarWeb
                        </button>
                        <ul class="dropdown-menu p-2"
                            style="font-size: 12px;"
                            aria-labelledby="dropdownMenuButton-@currentIndex"
                            data-bs-auto-close="false">

                            <!-- 🔘 Checkbox de "Todos" -->
                            <li>
                                <div class="form-check d-flex align-items-center">
                                    <input class="form-check-input"
                                           type="checkbox"
                                           id="check-@currentIndex-Todos"
                                           checked="@(selectedValues.Any(f => f.CodigoHomologacion == listaEtiquetasFiltros?[currentIndex]?.CodigoHomologacion) &&
                                              selectedValues.First(f => f.CodigoHomologacion == listaEtiquetasFiltros?[currentIndex]?.CodigoHomologacion).Seleccion.Count == (listadeOpciones[currentIndex]?.Count ?? 0))"
                                           style="border: 2px solid #007bff; width: 18px; height: 18px; margin-right: 8px;"
                                           @onchange="(e) => CambiarSeleccionTodos(currentIndex, e.Value)">
                                    <label class="form-check-label" for="check-@currentIndex-Todos" style="margin: 0;">
                                        Todos
                                    </label>
                                </div>
                            </li>

                            <!-- ✅ Checkboxes individuales -->
                            @foreach (var opcion in listadeOpciones[currentIndex] ?? [])
                            {
                                <li>
                                    <div class="form-check d-flex align-items-center">
                                        <input class="form-check-input checkbox-filtro"
                                               type="checkbox"
                                               id="check-@currentIndex-@opcion.MostrarWeb"
                                               data-idhomologacion="@opcion.IdHomologacion"
                                               data-codigohomologacion="@listaEtiquetasFiltros?[currentIndex]?.CodigoHomologacion"
                                               checked="@selectedValues.Any(f => f.CodigoHomologacion == listaEtiquetasFiltros?[currentIndex]?.CodigoHomologacion && f.Seleccion.Contains(opcion.MostrarWeb))"
                                               style="border: 2px solid #007bff; width: 18px; height: 18px; margin-right: 8px;"
                                               @onchange="(e) => CambiarSeleccion(opcion.MostrarWeb, currentIndex, e.Value)">
                                        <label class="form-check-label" for="check-@currentIndex-@opcion.MostrarWeb" style="margin: 0;">
                                            @opcion.MostrarWeb
                                        </label>
                                    </div>
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            }
        }
        <!-- 🔥 Los filtros están ocultos al inicio y se muestran solo cuando el usuario hace clic -->
        <div class="panel-input-filters-content-button">
            <button type="button" @onclick="LimpiarFiltros">
                <span>Limpiar</span>
                <i class="fas fa-broom"></i>
            </button>
        </div>
    </div>
</div>




<!-- 🔥 Agregar JavaScript al final para alternar la visibilidad -->
<script>
    let instanciaInputFilters = null;
    let isClickInsideDropdown = false;

    function registrarInstanciaInputFilters(ref) {
        instanciaInputFilters = ref;
    }

    function toggleFilters() {
        const panel = document.getElementById("filterPanel");
        const toggleText = document.getElementById("toggleText");

        if (panel.classList.contains("show")) {
            panel.classList.remove("show");
            toggleText.innerText = "Filtros Avanzados";
        } else {
            panel.classList.add("show");
            toggleText.innerText = "Ocultar Filtros Avanzados";
        }
    }

    // 🔁 Registrar si el clic empezó dentro de un dropdown
    document.addEventListener("mousedown", function (event) {
        const isDropdownClick = event.target.closest(".dropdown-menu") || event.target.closest(".dropdown-toggle");
        isClickInsideDropdown = !!isDropdownClick;
    });

    // ✅ Llamar solo si se hace clic fuera
    document.addEventListener("mouseup", function () {
        if (!isClickInsideDropdown) {
            invocarSeleccionados();
        }
        isClickInsideDropdown = false; // Reset
    });

    function invocarSeleccionados() {
        const seleccionados = [];

        const checkboxes = document.querySelectorAll(".checkbox-filtro:checked");
        checkboxes.forEach(chk => {
            const label = document.querySelector(`label[for='${chk.id}']`);
            const comboCodigo = chk.getAttribute("data-codigohomologacion");
            const idHomologacion = parseInt(chk.getAttribute("data-idhomologacion"));

            if (label && comboCodigo) {
                seleccionados.push({
                    Combo: comboCodigo,
                    Valor: label.innerText.trim(),
                    IdHomologacion: idHomologacion
                });
            }
        });

        if (instanciaInputFilters) {
            instanciaInputFilters.invokeMethodAsync('RecibirSeleccionados', seleccionados)
                .then(() => console.log("✅ RecibirSeleccionados ejecutado"))
                .catch(err => console.error("❌ Error al invocar:", err));
        }
    }
</script>




