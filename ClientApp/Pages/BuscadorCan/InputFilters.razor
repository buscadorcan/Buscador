@inject NavigationManager Navigation

<link href="/css/buscador-can/input-filters.css" rel="stylesheet">

<div class="panel-input-filters">
    <div class="panel-input-filters-title">
        <div onclick="toggleFilters()">
            <span id="toggleText">Filtros Avanzados</span>
        </div>
    </div>
    <div class="panel-input-filters-line" />
    <div class="panel-input-filters-img">
        @if (isGridVisible)
        {
            <div class="active" @onclick="() => _ = isGridVisibleChanged.InvokeAsync(false)">
                <img src="login/img/location-on.svg" alt="Cards" />
            </div>
        }
        else
        {
            <div class="active" @onclick="() => _ = isGridVisibleChanged.InvokeAsync(true)">
                <img src="login/img/format-list-bulleted-5.svg" alt="Grid" />
            </div>
        }
        <div @onclick="@(() => Navigation.NavigateTo("/acceder"))">
            <i class="fas fa-user" />
        </div>
    </div>
</div>

<!-- 🔥 Los filtros están ocultos al inicio y se muestran solo cuando el usuario hace clic -->
<div id="filterPanel" class="panel-input-filters-content">
    @if (listadeOpciones != null)
    {
        @for (int i = 0; i < listadeOpciones.Count; i++)
        {
            var currentIndex = i;
            <div class="col form-check-label" style="font-size: 12px !important;">
                <label for="select-@currentIndex" class="form-label text-small" style="font-weight: bold;"
                       title="@listaEtiquetasFiltros?[currentIndex]?.TooltipWeb">
                    @listaEtiquetasFiltros?[currentIndex]?.MostrarWeb
                </label>
                <div>
                    <button class="btn dropdown-toggle custom-bg @(selectedValues.Any(f => f.CodigoHomologacion == listaEtiquetasFiltros?[currentIndex]?.CodigoHomologacion && f.Seleccion.Count > 0) ? "selected-filter" : "")"
                            style="font-size: 11px !important;"
                            type="button"
                            id="dropdownMenuButton-@currentIndex"
                            data-bs-toggle="dropdown"
                            aria-expanded="false">
                        Seleccionar @listaEtiquetasFiltros?[currentIndex]?.MostrarWeb
                    </button>
                    <ul class="dropdown-menu p-2"
                        style="font-size: 11px !important;"
                        aria-labelledby="dropdownMenuButton-@currentIndex"
                        data-bs-auto-close="false">

                        <!-- 🔘 Checkbox de "Todos" -->
                        <li>
                            <div class="form-check" style="display: flex; align-items: center;">
                                <input class="form-check-input"
                                       type="checkbox"
                                       id="check-@currentIndex-Todos"
                                       checked="@(selectedValues.Any(f => f.CodigoHomologacion == listaEtiquetasFiltros?[currentIndex]?.CodigoHomologacion) &&
                                              selectedValues.First(f => f.CodigoHomologacion == listaEtiquetasFiltros?[currentIndex]?.CodigoHomologacion).Seleccion.Count == (listadeOpciones[currentIndex]?.Count ?? 0))"
                                       style="border: 2px solid #007bff; width: 18px; height: 18px; margin-right: 8px;"
                                       @onchange="(e) => CambiarSeleccionTodos(currentIndex, e.Value)">
                                <label class="form-check-label" for="check-@currentIndex-Todos" style="margin: 0;">
                                    Todos
                                </label>
                            </div>
                        </li>

                        <!-- ✅ Checkboxes individuales -->
                        @foreach (var opcion in listadeOpciones[currentIndex] ?? [])
                        {
                            <li>
                                <div class="form-check" style="display: flex; align-items: center;">
                                    <input class="form-check-input checkbox-filtro"
                                           type="checkbox"
                                           id="check-@currentIndex-@opcion.MostrarWeb"
                                           checked="@selectedValues.Any(f => f.CodigoHomologacion == listaEtiquetasFiltros?[currentIndex]?.CodigoHomologacion && f.Seleccion.Contains(opcion.MostrarWeb))"
                                           style="border: 2px solid #007bff; width: 18px; height: 18px; margin-right: 8px;"
                                           @onchange="(e) => CambiarSeleccion(opcion.MostrarWeb, currentIndex, e.Value)">
                                    <label class="form-check-label" for="check-@currentIndex-@opcion.MostrarWeb" style="margin: 0;">
                                        @opcion.MostrarWeb
                                    </label>
                                </div>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        }
    }

    <div class="panel-input-filters-content-button">
        <label>Limpiar Filtro</label>
        <button type="button" @onclick="LimpiarFiltros">
            <span>Limpiar</span>
            <i class="fas fa-broom" />
        </button>
    </div>
</div>


<!-- 🔥 Agregar JavaScript al final para alternar la visibilidad -->
<script type="text/javascript">

    function toggleFilters() {
        var panel = document.getElementById("filterPanel");
        var toggleText = document.getElementById("toggleText");

        if (panel.classList.contains("show")) {
            panel.classList.remove("show");
            toggleText.innerText = "Filtros Avanzados";
        } else {
            panel.classList.add("show");
            toggleText.innerText = "Ocultar Filtros Avanzados";
        }
    }

    document.addEventListener('click', function (event) {
        var dropdowns = document.querySelectorAll('.dropdown-toggle');

        dropdowns.forEach(function (dropdown) {
            var dropdownMenu = dropdown.nextElementSibling;

            if (!dropdown.contains(event.target) && !dropdownMenu.contains(event.target)) {
                var bootstrapDropdown = bootstrap.Dropdown.getInstance(dropdown);
                if (bootstrapDropdown) {
                    bootstrapDropdown.show();
                }
            }
        });
    });

    document.addEventListener("click", function (event) {
        const filterPanel = document.getElementById("filterPanel");

        if (!filterPanel.contains(event.target)) {
            const checkboxes = document.querySelectorAll(".checkbox-filtro:checked");

            if (checkboxes.length > 0) {
                const seleccionados = [];

                checkboxes.forEach(chk => {
                    const label = document.querySelector(`label[for='${chk.id}']`);
                    if (label) {
                        const comboIndex = chk.id.split('-')[1]; // Extraer el índice del combo
                        seleccionados.push({
                            Combo: comboIndex,
                            Valor: label.innerText.trim()
                        });
                    }
                });

                if (instanciaInputFilters) {
                   instanciaInputFilters.invokeMethodAsync('RecibirSeleccionados', seleccionados)
                   .then(result => console.log("Método ejecutado con éxito"))
                   .catch(error => console.error("Error en la invocación de Blazor:", error));
                }
            }
        }
    });

    let instanciaInputFilters = null;

    function registrarInstanciaInputFilters(ref) {
        instanciaInputFilters = ref;
    }




</script>
