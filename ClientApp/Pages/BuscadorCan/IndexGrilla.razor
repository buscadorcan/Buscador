@using ClientApp.Models;
@using SharedApp.Models.Dtos
@using Newtonsoft.Json;
@using BlazorBootstrap


<div class="py-2">
    <Modal @ref="modal" Size="ModalSize.ExtraLarge" />

    @if (!isLoading && listaEtiquetasGrilla != null)
    {
        <Grid @ref="grid"
              TItem="BuscadorResultadoDataDto"
              class="table table-hover table-bordered table-striped text-start"
              style="font-family: 'Inter-Medium', Helvetica, sans-serif !important; font-size: 10px !important;"
              DataProvider="ResultadoBusquedaDataProvider"
              HeaderRowCssClass="bg-primary text-white border-bottom-0"
              Responsive="true"
              AllowSorting="true"
              AllowPaging="true"
              PageSize="5"
              PageSizeSelectorVisible="true"
              PageSizeSelectorItems="@(new int[] { 5, 10, 20, 30 })"
              ItemsPerPageText="Items por página">
            <GridColumn TItem="BuscadorResultadoDataDto" HeaderText="Informacion de Organismos de Acreditación" class="grid-header">
                <Button Color="ButtonColor.Secondary" Outline="true" Size="ButtonSize.Small" @onclick="() => showModalOna(context)">
                    <!-- Usa el diccionario precargado para obtener la URL del ícono -->
                    <img src="@(iconUrls.ContainsKey(context.IdONA.GetValueOrDefault()) ? iconUrls[context.IdONA.GetValueOrDefault()]
                    : "")"
                         alt="Icono" style="width: 16px; height: 16px;" />
                </Button>
            </GridColumn>

            @foreach (var etiqueta in listaEtiquetasGrilla.OrderBy(c => c.MostrarWebOrden))
            {
                <GridColumn TItem="BuscadorResultadoDataDto" PropertyName="@etiqueta.MostrarWeb" SortString="@etiqueta.MostrarWeb">
                    <HeaderContent> 
                        <Tooltip Title="@etiqueta.TooltipWeb">
                            <span class="grid-header">@etiqueta.MostrarWeb</span>
                        </Tooltip>
                    </HeaderContent>
                    <ChildContent>
                        @{
                            var dato = context?.DataEsquemaJson?.FirstOrDefault(f => f.IdHomologacion == etiqueta.IdHomologacion)?.Data;
                        }

                        @if (etiqueta.IdHomologacion == 81)
                        {
                            <Button @onclick="() => showModalOEC(context)" Color="ButtonColor.Link" style="font-family: 'Inter-Medium', Helvetica, sans-serif !important; font-size: 10px !important; text-align: left !important; justify-content: flex-start !important;">
                                @(string.IsNullOrWhiteSpace(dato.Trim()) ? "ModalPrueba" : dato)
                            </Button>
                        }
                        else if (etiqueta.IdHomologacion == 91)
                        {
                            <Button @onclick="() => showModalESQ(context)" Color="ButtonColor.Link" style="font-family: 'Inter-Medium', Helvetica, sans-serif !important; font-size: 10px !important; text-align: left !important; justify-content: flex-start !important;">
                                @(string.IsNullOrWhiteSpace(dato.Trim()) ? "ModalPrueba" : dato)
                            </Button>
                        }
                        else if (etiqueta.IdHomologacion == 96 || etiqueta.IdHomologacion == 94 || etiqueta.IdHomologacion == 95)
                        {
                            @if (DateTime.TryParse(dato, out DateTime fechaConvertida))
                            {
                                @fechaConvertida.ToString("yyyy-MM-dd")
                            }
                            else
                            {
                                @("--")
                            }
                        }
                        else
                        {
                            @(string.IsNullOrWhiteSpace(dato) ? "--" : dato)
                        }
                        
                    </ChildContent>
                </GridColumn>
            }
            <GridColumn TItem="BuscadorResultadoDataDto" HeaderText="Detalle del alcance" class="grid-header">
                <Button Color="ButtonColor.Secondary" Outline="true" Size="ButtonSize.Small" @onclick="() => showModal(context)">
                    <Icon Name="IconName.Front" />
                </Button>
            </GridColumn>
            <GridColumn TItem="BuscadorResultadoDataDto" HeaderText="Alcance acreditado ONA" class="grid-header">
                    <Button Color="ButtonColor.Secondary" Outline="true" Size="ButtonSize.Small" @onclick="() => ShowPdfDialog(context)">
                    <Icon Name="IconName.FileTypePdf" />
                </Button>
            </GridColumn>
        </Grid>
    }
    else
    {
        <p class="label valign-text-middle inter-regular-normal-comet-14px">Cargando datos...</p>
    }

</div>

