@page "/esquemas"
@layout AdminLayout
@using Microsoft.AspNetCore.Authorization;
@using OfficeOpenXml
@using SharedApp.Models.Dtos
@attribute [Authorize]
@using System.IO
@using System.Text
@using iTextSharp.text
@using iTextSharp.text.pdf

<PageTitle>Homologación Esquemas</PageTitle>

    <div class="general title">
        <h2 class="title headlineheadline2-h2">Administación de Homologación Esquemas</h2>
        <Modal @ref="modal" Size="ModalSize.ExtraLarge" />
    </div>
    
    
<style>
    .general.table {
        width: 100%;
        border-collapse: collapse;
        table-layout: fixed; /* Asegura que las columnas de thead y tbody sean iguales */
    }

        .general.table thead {
            display: table-header-group; /* Asegura que el thead se expanda correctamente */
            width: 100%; /* Hace que el encabezado ocupe el ancho completo */
        }

        .general.table th,
        .general.table td {
            width: 100% !important; /* Permite que cada columna tenga el mismo ancho */
            min-width: 180px; /* Ajusta este valor si necesitas más espacio */
            text-align: left; /* Alinea el contenido a la izquierda */
            padding: 10px; /* Agrega espacio interno */
            box-sizing: border-box; /* Evita que el padding afecte el tamaño total */
        }

        .general.table th {
            background-color: #f4f4f4; /* Diferencia visualmente el encabezado */
            font-weight: bold;
            text-align: left;
        }

        .general.table tbody {
            width: 100%;
            display: table-row-group; /* Asegura que el tbody ocupe el ancho total */
        }

        .general.table .table-primary {
            background-color: #cce5ff !important; /* Resalta las filas con esta clase */
        }
        .table-responsive{
            width: -webkit-fill-available !important;
        }
</style>


<div class="d-flex justify-content-between my-3">
    <!-- Grupo de botones de exportación -->
    <div class="d-flex gap-2">
        <!-- Botón Exportar a Excel -->
        <Button Type="ButtonType.Button" Color="ButtonColor.Primary" Outline="true" @onclick="ExportarExcel">
            <Icon Name="IconName.FileEarmarkArrowDown" />
            <span class="ms-2 btnExp">Exportar a Excel</span>
        </Button>

        <!-- Botón Exportar a PDF -->
        <Button Type="ButtonType.Button" Color="ButtonColor.Danger" Outline="true" @onclick="ExportarPDF">
            <Icon Name="IconName.FileEarmarkPdf" />
            <span class="ms-2 btnExp">Exportar a PDF</span>
        </Button>
    </div>

    <!-- Botón Agregar Registro -->
    <div class="button-container">
        <Button Type="ButtonType.Link" class="button-2" To="/nuevo-esquema">
            <div class="button-3 headingheadline4-h4">Agregar Registro</div>
        </Button>
    </div>
</div>

<div class="general table">
    <Grid @ref="grid"
          TItem="EsquemaDto"
          class="table table-hover table-striped"
          DataProvider="EsquemasDataProvider"
          Responsive="true"
          Id="sortableGrid"
          Style="width:100%; width: -webkit-fill-available !important;">

        <GridColumn TItem="EsquemaDto" HeaderText="Texto a Mostrar en la Web" PropertyName="MostrarWeb" class="cell-text cell-1 bodybody-small"
                    ColumnClass="@(x => x.MostrarWebOrden == 1 ? "table-primary" : "")">
            @(string.IsNullOrWhiteSpace(context.MostrarWeb) ? "-" : context.MostrarWeb)
            <input type="hidden" value="@context.IdEsquema" />
        </GridColumn>

        <GridColumn TItem="EsquemaDto" HeaderText="Nombre Vista" PropertyName="NombreVista" class="cell-text cell-1 bodybody-small"
                    ColumnClass="@(x => x.MostrarWebOrden == 1 ? "table-primary" : "")" >
            @(string.IsNullOrWhiteSpace(context.EsquemaVista) ? "-" : context.EsquemaVista) 
        </GridColumn>

        <GridColumn TItem="EsquemaDto" HeaderText="Columnas" class="cell-text cell-1 bodybody-small"
                    ColumnClass="@(x => x.MostrarWebOrden == 1 ? "table-primary" : "")">
            <Button Color="ButtonColor.Secondary" Outline="true" Size="ButtonSize.Small" @onclick="() => showModal(context.IdEsquema)">
                <Icon Name="IconName.Front" />
            </Button>
        </GridColumn>

        <GridColumn TItem="EsquemaDto" HeaderText="Editar" class="cell-text cell-1 bodybody-small"
                    ColumnClass="@(x => x.MostrarWebOrden == 1 ? "table-primary" : "")">
            <Button Type="ButtonType.Link" Color="ButtonColor.Secondary" Outline="true"
                    To="@($"/editar-esquema/{context.IdEsquema}")" Size="ButtonSize.Small">
                <Icon Name="IconName.PencilSquare" />
            </Button>
        </GridColumn>

        <GridColumn TItem="EsquemaDto" HeaderText="Eliminar" class="cell-text cell-1 bodybody-small"
                    ColumnClass="@(x => x.MostrarWebOrden == 1 ? "table-primary" : "")">
            <Button Color="ButtonColor.Danger" Outline="true" @onclick=@(() => OpenDeleteModal(context.IdEsquema)) Size="ButtonSize.Small">
                <Icon Name="IconName.Trash3" />
            </Button>
        </GridColumn>

    </Grid>
</div>

    <div class="card-footer">
        <div class="py-2">
            <Alert Color="AlertColor.Primary" Dismissable="false">
                <Icon Name="IconName.InfoCircleFill" class="me-2"></Icon>
            <span class="label valign-text-middle inter-regular-normal-comet-16px">Esquema a mostrar por defecto en el buscador</span>
            </Alert>
        </div>
    </div>

@code {
    private async Task ExportarExcel()
    {
        objEventTracking.NombrePagina = "Administación de Homologación Esquemas";
        objEventTracking.NombreAccion = "ExportarExcel";
        objEventTracking.NombreControl = "ExportarExcel";
        objEventTracking.NombreUsuario = await iLocalStorageService.GetItemAsync<string>(Inicializar.Datos_Usuario_Nombre_Local) + ' ' + iLocalStorageService.GetItemAsync<string>(Inicializar.Datos_Usuario_Apellido_Local);
        objEventTracking.TipoUsuario = await iLocalStorageService.GetItemAsync<string>(Inicializar.Datos_Usuario_Nombre_Rol_Local);
        objEventTracking.ParametroJson = "";
        await iBusquedaService.AddEventTrackingAsync(objEventTracking);

        if (listaEsquemas == null || !listaEsquemas.Any())
        {
            return;
        }

        ExcelPackage.LicenseContext = LicenseContext.NonCommercial; // Configurar licencia para EPPlus

        using var package = new ExcelPackage();
        var worksheet = package.Workbook.Worksheets.Add("Esquemas");

        // Agregar encabezados
        worksheet.Cells[1, 1].Value = "Texto a Mostrar en la Web";
        worksheet.Cells[1, 2].Value = "Nombre Vista";

        int row = 2;
        foreach (var esquema in listaEsquemas)
        {
            worksheet.Cells[row, 1].Value = esquema.MostrarWeb;
            worksheet.Cells[row, 2].Value = esquema.EsquemaVista;
            row++;
        }

        worksheet.Cells.AutoFitColumns(); // Ajustar automáticamente las columnas

        var fileName = "Esquemas_Export.xlsx";
        var fileBytes = package.GetAsByteArray();
        var fileBase64 = Convert.ToBase64String(fileBytes);

        await JSRuntime.InvokeVoidAsync("downloadExcel", fileName, fileBase64);
    }
    private async Task ExportarPDF()
    {
        objEventTracking.NombrePagina = "Administación de Homologación Esquemas";
        objEventTracking.NombreAccion = "ExportarPDF";
        objEventTracking.NombreControl = "ExportarPDF";
        objEventTracking.NombreUsuario = await iLocalStorageService.GetItemAsync<string>(Inicializar.Datos_Usuario_Nombre_Local) + ' ' + iLocalStorageService.GetItemAsync<string>(Inicializar.Datos_Usuario_Apellido_Local);
        objEventTracking.TipoUsuario = await iLocalStorageService.GetItemAsync<string>(Inicializar.Datos_Usuario_Nombre_Rol_Local);
        objEventTracking.ParametroJson = "";
        await iBusquedaService.AddEventTrackingAsync(objEventTracking);

        if (listaEsquemas == null || !listaEsquemas.Any())
        {
            return;
        }

        using var memoryStream = new MemoryStream();
        var document = new Document(iTextSharp.text.PageSize.A4);
        var writer = PdfWriter.GetInstance(document, memoryStream);
        document.Open();

        var font = FontFactory.GetFont(FontFactory.HELVETICA_BOLD, 12);
        var table = new PdfPTable(2) { WidthPercentage = 100 };

        table.AddCell(new Phrase("Texto a Mostrar en la Web", font));
        table.AddCell(new Phrase("Nombre Vista", font));

        foreach (var esquema in listaEsquemas)
        {
            table.AddCell(esquema.MostrarWeb ?? "-");
            table.AddCell(esquema.EsquemaVista ?? "-");
        }

        document.Add(table);
        document.Close();

        var fileName = "Esquemas_Export.pdf";
        var fileBase64 = Convert.ToBase64String(memoryStream.ToArray());

        await JSRuntime.InvokeVoidAsync("downloadFile", fileName, "application/pdf", fileBase64);
    }
}


@if (deleteshowModal)
{
    <div class="modal show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title inter-regular-normal-comet-14px">Confirmar Eliminación</h5>
                    <button type="button" class="btn-close inter-regular-normal-comet-14px" aria-label="Close"
                            @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <p class="label valign-text-middle inter-regular-normal-comet-14px">¿Está seguro que desea eliminar este registro?</p>
                </div>
                <div class="modal-footer">
                    <Button Color="ButtonColor.Danger" @onclick=@(() => ConfirmDelete())>Eliminar</Button>
                    <Button Color="ButtonColor.Secondary" @onclick=@(() => CloseModal())>Cancelar</Button>
                </div>
            </div>
        </div>
    </div>
}