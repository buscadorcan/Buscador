@page "/onas"
@layout AdminLayout
@using Microsoft.AspNetCore.Authorization;
@using OfficeOpenXml
@using SharedApp.Models.Dtos;
@using System.Text
@attribute [Authorize]
@inject IJSRuntime JSRuntime
@using System.IO
@using iTextSharp.text
@using iTextSharp.text.pdf

    <!-- Card Header -->
    <div class="genetal title">
        <h2 class="title headlineheadline2-h2">Administraci√≥n de ONA</h2>
    </div>

<div class="text-end my-3 d-flex justify-content-between">
    <div>
        <!-- Bot√≥n Exportar a Excel -->
        <Button Type="ButtonType.Button" Color="ButtonColor.Primary" Outline="true" class="me-2" @onclick="ExportarExcel">
            <Icon Name="IconName.FileEarmarkArrowDown" />
            <span class="ms-2 btnExp">Exportar a Excel</span>
        </Button>

        <!-- Bot√≥n Exportar a PDF -->
        <Button id="btnExportarPDF" Type="ButtonType.Button" Color="ButtonColor.Danger" Outline="true" @onclick="ExportarPDF">
            <Icon Name="IconName.FileEarmarkPdf" />
            <span class="ms-2 btnExp">Exportar a PDF</span>
        </Button>
    </div>

    <!-- Bot√≥n Crear Nuevo -->
    <div class="button-container">
        <Button Type="ButtonType.Link" class="button-2" To="/nuevo-ona">
            <div class="button-3 headingheadline4-h4">Crear nuevo ona</div>
        </Button>
    </div>
</div>

 <div class="table table-1">
    <div class="table-heading table-1">
        <div class="table-heading-1 table-heading-10 sortable-header" @onclick="() => OrdenarPor(nameof(OnaDto.RazonSocial))">
            <div class="header-label-1 header-label-4">
                <div class="label-heading headingheadline5-h5">
                    Raz√≥n Social @(sortColumn == nameof(OnaDto.RazonSocial) ? (sortAscending ? "‚¨Ü" : "‚¨á") : "")
                </div>
            </div>
        </div>

        <div class="table-heading-1 table-heading-10 sortable-header" @onclick="() => OrdenarPor(nameof(OnaDto.Siglas))">
            <div class="header-label-1 header-label-4">
                <div class="label-heading headingheadline5-h5">
                    Siglas @(sortColumn == nameof(OnaDto.Siglas) ? (sortAscending ? "‚¨Ü" : "‚¨á") : "")
                </div>
            </div>
        </div>

        <div class="table-heading-1 table-heading-10 sortable-header" @onclick="() => OrdenarPor(nameof(OnaDto.Ciudad))">
            <div class="header-label-1 header-label-4">
                <div class="label-heading headingheadline5-h5">
                    Ciudad @(sortColumn == nameof(OnaDto.Ciudad) ? (sortAscending ? "‚¨Ü" : "‚¨á") : "")
                </div>
            </div>
        </div>

        <div class="table-heading-1 table-heading-10 sortable-header" @onclick="() => OrdenarPor(nameof(OnaDto.Correo))">
            <div class="header-label-1 header-label-4">
                <div class="label-heading headingheadline5-h5">
                    Correo @(sortColumn == nameof(OnaDto.Correo) ? (sortAscending ? "‚¨Ü" : "‚¨á") : "")
                </div>
            </div>
        </div>

        <div class="table-heading-1 table-heading-10 sortable-header" @onclick="() => OrdenarPor(nameof(OnaDto.Direccion))">
            <div class="header-label-1 header-label-4">
                <div class="label-heading headingheadline5-h5">
                    Direcci√≥n @(sortColumn == nameof(OnaDto.Direccion) ? (sortAscending ? "‚¨Ü" : "‚¨á") : "")
                </div>
            </div>
        </div>

        <div class="table-heading-1 table-heading-10 sortable-header" @onclick="() => OrdenarPor(nameof(OnaDto.PaginaWeb))">
            <div class="header-label-1 header-label-4">
                <div class="label-heading headingheadline5-h5">
                    P√°gina Web @(sortColumn == nameof(OnaDto.PaginaWeb) ? (sortAscending ? "‚¨Ü" : "‚¨á") : "")
                </div>
            </div>
        </div>

        <div class="table-heading-1 table-heading-10 sortable-header" @onclick="() => OrdenarPor(nameof(OnaDto.Telefono))">
            <div class="header-label-1 header-label-4">
                <div class="label-heading headingheadline5-h5">
                    Tel√©fono @(sortColumn == nameof(OnaDto.Telefono) ? (sortAscending ? "‚¨Ü" : "‚¨á") : "")
                </div>
            </div>
        </div>

        <div class="table-heading-1 table-heading-10">
            <div class="header-label-1 header-label-4">
                <div class="label-heading headingheadline5-h5">Editar</div>
            </div>
        </div>

        <div class="table-heading-1 table-heading-10">
            <div class="header-label-1 header-label-4">
                <div class="label-heading headingheadline5-h5">Eliminar</div>
            </div>
        </div>
    </div>

    @if (listaONAs != null && listaONAs.Any())
    {
        <div class="content content-2">
            @foreach (var ona in PaginatedItems)
            {
                <div class="row row-15">
                    <div class="componente">
                        <div class="row-1 row-15">
                            <div class="ads-rules-list">
                                <div class="cell cell-1"><div class="cell-text cell-1 bodybody-small">@ona.RazonSocial</div></div>
                                <div class="cell cell-1"><div class="cell-text cell-1 bodybody-small">@ona.Siglas</div></div>
                                <div class="cell cell-1"><div class="cell-text cell-1 bodybody-small">@ona.Ciudad</div></div>
                                <div class="cell cell-1"><div class="cell-text cell-1 bodybody-small">@ona.Correo</div></div>
                                <div class="cell cell-1"><div class="cell-text cell-1 bodybody-small">@ona.Direccion</div></div>
                                <div class="cell cell-1"><div class="cell-text cell-1 bodybody-small">@ona.PaginaWeb</div></div>
                                <div class="cell cell-1"><div class="cell-text cell-1 bodybody-small">@ona.Telefono</div></div>
                                <div class="cell cell-1">
                                    <Tooltip Title="Editar registro">
                                        <Button Type="ButtonType.Link" Color="ButtonColor.Secondary" Outline="true" To="@($"/editar-ona/{ona.IdONA}")" Size="ButtonSize.Small">
                                            <Icon Name="IconName.PencilSquare" />
                                        </Button>
                                    </Tooltip>
                                </div>
                                <div class="cell cell-1">
                                    <Tooltip Title="Eliminar registro">
                                        <Button id="btnEliminar" @ref="saveButton" Type="ButtonType.Button" Color="ButtonColor.Danger" Outline="true" Size="ButtonSize.Small" @onclick=@(() => OpenDeleteModal(ona.IdONA))>
                                            <Icon Name="IconName.Trash" />
                                        </Button>
                                    </Tooltip>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        <!-- Controles de paginaci√≥n -->
        <div class="pagination-container">
            <button class="btn btn-primary btn-sm" @onclick="PreviousPage" disabled="@(!CanGoPrevious)">
                ‚è™
            </button>

            <span class="pagination-text inter-regular-normal-comet-14px">P√°gina @CurrentPage de @TotalPages</span>

            <button class="btn btn-primary btn-sm" @onclick="NextPage" disabled="@(!CanGoNext)">
                ‚è©
            </button>
        </div>
    }
    else
    {
        <p class="label valign-text-middle inter-regular-normal-comet-16px">No hay datos disponibles.</p>
    }
</div>

@code {
    private string sortColumn = nameof(OnaDto.RazonSocial);
    private bool sortAscending = true;

    private void OrdenarPor(string column)
    {
        if (sortColumn == column)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortColumn = column;
            sortAscending = true;
        }

        listaONAs = sortAscending
            ? listaONAs.OrderBy(x => x.GetType().GetProperty(sortColumn)?.GetValue(x, null)).ToList()
            : listaONAs.OrderByDescending(x => x.GetType().GetProperty(sortColumn)?.GetValue(x, null)).ToList();
    }

    private async Task ExportarExcel()
    {
        objEventTracking.NombrePagina = "/onas";
        objEventTracking.NombreAccion = "ExportarExcel";
        objEventTracking.NombreControl = "btnExportarExcel";
        objEventTracking.NombreUsuario = await iLocalStorageService.GetItemAsync<string>(Inicializar.Datos_Usuario_Local);
        objEventTracking.TipoUsuario = await iLocalStorageService.GetItemAsync<string>(Inicializar.Datos_Usuario_Codigo_Rol_Local);

        if (listaONAs == null || !listaONAs.Any())
        {
            return;
        }

        ExcelPackage.LicenseContext = LicenseContext.NonCommercial; // üîπ Soluci√≥n: Configurar licencia

        using var package = new ExcelPackage();
        var worksheet = package.Workbook.Worksheets.Add("ONAs");

        // Agregar encabezados
        worksheet.Cells[1, 1].Value = "Raz√≥n Social";
        worksheet.Cells[1, 2].Value = "Siglas";
        worksheet.Cells[1, 3].Value = "Ciudad";
        worksheet.Cells[1, 4].Value = "Correo";
        worksheet.Cells[1, 5].Value = "Direcci√≥n";
        worksheet.Cells[1, 6].Value = "P√°gina Web";
        worksheet.Cells[1, 7].Value = "Tel√©fono";

        int row = 2;
        foreach (var ona in listaONAs)
        {
            worksheet.Cells[row, 1].Value = ona.RazonSocial;
            worksheet.Cells[row, 2].Value = ona.Siglas;
            worksheet.Cells[row, 3].Value = ona.Ciudad;
            worksheet.Cells[row, 4].Value = ona.Correo;
            worksheet.Cells[row, 5].Value = ona.Direccion;
            worksheet.Cells[row, 6].Value = ona.PaginaWeb;
            worksheet.Cells[row, 7].Value = ona.Telefono;
            row++;
        }

        worksheet.Cells.AutoFitColumns(); // Ajustar autom√°ticamente columnas

        var fileName = "ONAs_Export.xlsx";
        var fileBytes = package.GetAsByteArray();
        var fileBase64 = Convert.ToBase64String(fileBytes);

        await JSRuntime.InvokeVoidAsync("downloadExcel", fileName, fileBase64);
    }

    private async Task ExportarPDF()
    {
        objEventTracking.NombrePagina = "/onas";
        objEventTracking.NombreAccion = "ExportarPDF";
        objEventTracking.NombreControl = "btnExportarPDF";
        objEventTracking.NombreUsuario = await iLocalStorageService.GetItemAsync<string>(Inicializar.Datos_Usuario_Local);
        objEventTracking.TipoUsuario = await iLocalStorageService.GetItemAsync<string>(Inicializar.Datos_Usuario_Codigo_Rol_Local);

        if (listaONAs == null || !listaONAs.Any())
        {
            return;
        }

        using var memoryStream = new MemoryStream();
        var document = new Document(iTextSharp.text.PageSize.A4);
        var writer = PdfWriter.GetInstance(document, memoryStream);
        document.Open();

        var font = FontFactory.GetFont(FontFactory.HELVETICA_BOLD, 12);
        var table = new PdfPTable(7) { WidthPercentage = 100 };

        table.AddCell(new Phrase("Raz√≥n Social", font));
        table.AddCell(new Phrase("Siglas", font));
        table.AddCell(new Phrase("Ciudad", font));
        table.AddCell(new Phrase("Correo", font));
        table.AddCell(new Phrase("Direcci√≥n", font));
        table.AddCell(new Phrase("P√°gina Web", font));
        table.AddCell(new Phrase("Tel√©fono", font));

        foreach (var ona in listaONAs)
        {
            table.AddCell(ona.RazonSocial);
            table.AddCell(ona.Siglas);
            table.AddCell(ona.Ciudad);
            table.AddCell(ona.Correo);
            table.AddCell(ona.Direccion);
            table.AddCell(ona.PaginaWeb);
            table.AddCell(ona.Telefono);
        }

        document.Add(table);
        document.Close();

        var fileName = "ONAs_Export.pdf";
        var fileBase64 = Convert.ToBase64String(memoryStream.ToArray());

        await JSRuntime.InvokeVoidAsync("downloadFile", fileName, "application/pdf", fileBase64);
    }
}

@if (showModal)
{
    <div class="modal show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title inter-regular-normal-comet-14px">Confirmar Eliminaci√≥n</h5>
                    <button type="button" class="btn-close inter-regular-normal-comet-14px" aria-label="Close"
                            @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <p class="label valign-text-middle inter-regular-normal-comet-14px">¬øEst√° seguro que desea eliminar este registro?</p>
                </div>
                <div class="modal-footer">
                    <Button Color="ButtonColor.Danger" @onclick=@(() => ConfirmDelete())>Eliminar</Button>
                    <Button Color="ButtonColor.Secondary" @onclick=@(() => CloseModal())>Cancelar</Button>
                </div>
            </div>
        </div>
    </div>
}