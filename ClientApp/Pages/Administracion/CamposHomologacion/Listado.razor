@page "/campos-homologacion"
@layout AdminLayout
@using System.IO
@using System.Text
@using OfficeOpenXml
@using SharedApp.Dtos
@using iTextSharp.text
@using iTextSharp.text.pdf

<style>
    .striped-table tbody tr:nth-child(odd) {
        background-color: #f9f9f9;
    }

    .striped-table tbody tr:nth-child(even) {
        background-color: #ffffff;
    }

    .card {
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        border: 1px solid #ddd;
        border-radius: 8px;
        overflow: hidden;
        margin: 20px 0;
    }

    .card-header {
        background-color: #007bff;
        color: white;
        padding: 10px 15px;
        font-size: 1.25rem;
        font-weight: bold;
    }

    .card-body {
        padding: 15px;
    }

    .card-footer {
        background-color: #f8f9fa;
        padding: 10px 15px;
        text-align: right;
        border-top: 1px solid #ddd;
    }

    .table-responsive {
        overflow-x: auto;
    }

    .text-center text-secondary my-5{
    color: var(--neutral-dark30) !important;
    font-family: var(--font-family-inter-regular) !important;
    font-size: var(--font-size-l) !important;
    font-style: normal !important;
        font-weight: 400 !important;
    }

</style>

<PageTitle>Campos Homologación</PageTitle>
<div class="general title" style="margin-top:0px !important">
    <h2 class="title headlineheadline2-h2">Administración de campos de Homologación</h2>
</div>

        <div class="form-group">
    <label for="grupoHomologacionSelect" class="label valign-text-middle inter-regular-normal-comet-16px">Grupo de Homologación</label>
    <select id="grupoHomologacionSelect" class="form-control inter-regular-normal-comet-14px" @onchange="OnAutoCompleteChangedHandler" style="margin-top: 2% !important; width: 338.8px !important;">
                <option value="" selected disabled>Seleccione Grupo de Homologación</option>
                @if (listaVwHomologacion != null)
                {
                    @foreach (var g in listaVwHomologacion)
                    {
                        <option value="@g.IdHomologacion">@g.MostrarWeb</option>
                    }
                }
            </select>
        </div>

<style>
    .general.table {
        width: 100%;
        table-layout: fixed;
    }

        .general.table th,
        .general.table td {
            width: auto; /* Distribuye equitativamente el ancho */
            text-align: left;
            white-space: nowrap; /* Evita que el contenido se divida en varias líneas */
            min-width: 150px; /* Asegura que cada columna tenga un tamaño mínimo */
        }

        .general.table tbody {
            width: 100%;
            display: table; /* Permite que el tbody ocupe todo el ancho */
            table-layout: fixed;
        }
</style>

<div class="col-md-12">
    <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-2">
        @if (homologacionSelected != null)
        {
            <div class="d-flex align-items-center gap-2 my-3 w-100">
                <!-- Grupo de botones para exportar -->
                <div class="d-flex gap-2">
                    <!-- Botón Exportar a Excel -->
                    <Button id="btnExportarExcel" Type="ButtonType.Button" Color="ButtonColor.Primary" Outline="true" @onclick="ExportarExcel">
                        <Icon Name="IconName.FileEarmarkArrowDown" />
                        <span class="ms-2 btnExp">Exportar a Excel</span>
                    </Button>

                    <!-- Botón Exportar a PDF -->
                    <Button id="btnExportarPDF" Type="ButtonType.Button" Color="ButtonColor.Danger" Outline="true" @onclick="ExportarPDF">
                        <Icon Name="IconName.FileEarmarkPdf" />
                        <span class="ms-2 btnExp">Exportar a PDF</span>
                    </Button>
                </div>

                @if (IsAdd)
                {
                    <!-- Botón Agregar Registro -->
                    <div class="button-container ms-auto">
                        <Button Type="ButtonType.Link" class="button-2" To="@($"/nuevo-campos-homologacion/{homologacionSelected?.IdHomologacion}")">
                            <div class="button-3 headingheadline4-h4">Agregar Registro</div>
                        </Button>
                    </div>
                }
                
            </div>
        }
    </div>
</div>


<div class="general table">
    <Grid Id="sortableGrid"
          @ref="grid"
          TItem="HomologacionDto"
          class="table table-hover table-bordered table-striped striped-table"
          DataProvider="HomologacionDataProvider"
          Responsive="true"
          AllowFiltering="true"
          Style="width:100%;">

        <GridColumn TItem="HomologacionDto" HeaderText="Vista Código Homologado" PropertyName="NombreHomologado" Class="cell-text cell-1 bodybody-small">
            @(string.IsNullOrWhiteSpace(context.NombreHomologado) ? "-" : context.NombreHomologado)
            <input type="hidden" value="@context.IdHomologacion" />
        </GridColumn>

        <GridColumn TItem="HomologacionDto" HeaderText="Texto a Mostrar en la Web" PropertyName="MostrarWeb" Class="cell-text cell-1 bodybody-small">
            @(string.IsNullOrWhiteSpace(context.MostrarWeb) ? "-" : context.MostrarWeb)
            <input type="hidden" value="@context.IdHomologacion" />
        </GridColumn>

        <GridColumn TItem="HomologacionDto" HeaderText="Tooltip Web" PropertyName="TooltipWeb" Class="cell-text cell-1 bodybody-small">
            @(string.IsNullOrWhiteSpace(context.TooltipWeb) ? "-" : context.TooltipWeb)
        </GridColumn>

        <GridColumn TItem="HomologacionDto" HeaderText="Tipo de Dato" PropertyName="MascaraDato" Class="cell-text cell-1 bodybody-small">
            @(string.IsNullOrWhiteSpace(context.MascaraDato) ? "-" : context.MascaraDato)
        </GridColumn>

        <GridColumn TItem="HomologacionDto" HeaderText="Si No Hay Dato" PropertyName="SiNoHayDato" Class="cell-text cell-1 bodybody-small">
            @(string.IsNullOrWhiteSpace(context.SiNoHayDato) ? "-" : context.SiNoHayDato)
        </GridColumn>

        <GridColumn TItem="HomologacionDto" HeaderText="Opciones">
            <!-- Botón Editar -->
            <Tooltip Title="Editar registro">
                <Button Type="ButtonType.Link" Color="ButtonColor.Secondary" Outline="true" To="@($"/editar-campos-homologacion/{homologacionSelected.IdHomologacion}/{context.IdHomologacion}")" Size="ButtonSize.Small">
                    <Icon Name="IconName.PencilSquare" />
                </Button>
            </Tooltip>

            <!-- Botón Eliminar -->
            <Tooltip Title="Eliminar registro">
                <Button id="btnEliminar" Color="ButtonColor.Danger" Outline="true" Size="ButtonSize.Small" @onclick=@(() => OpenDeleteModal(context.IdHomologacion))>
                    <Icon Name="IconName.Trash3" />
                </Button>
            </Tooltip>
        </GridColumn>

    </Grid>
</div>

@code {
    private async Task ExportarExcel()
    {
        objEventTracking.CodigoHomologacionMenu = "/campos-homologacion";
        objEventTracking.NombreAccion = "ExportarExcel";
        objEventTracking.NombreControl = "btnExportarExcel";
        objEventTracking.NombreUsuario = await iLocalStorageService.GetItemAsync<string>(Inicializar.Datos_Usuario_Local);
        objEventTracking.CodigoHomologacionRol = await iLocalStorageService.GetItemAsync<string>(Inicializar.Datos_Usuario_Codigo_Rol_Local);
        objEventTracking.ParametroJson = "{}";
        objEventTracking.UbicacionJson = "";
        await iBusquedaService.AddEventTrackingAsync(objEventTracking);

        if (listaHomologacions == null || !listaHomologacions.Any())
        {
            return;
        }

        ExcelPackage.LicenseContext = LicenseContext.NonCommercial; // Configurar licencia para EPPlus

        using var package = new ExcelPackage();
        var worksheet = package.Workbook.Worksheets.Add("Homologaciones");

        // Agregar encabezados
        worksheet.Cells[1, 1].Value = "Vista Código Homologado";
        worksheet.Cells[1, 2].Value = "Texto a Mostrar en la Web";
        worksheet.Cells[1, 3].Value = "Tooltip Web";
        worksheet.Cells[1, 4].Value = "Tipo de Dato";
        worksheet.Cells[1, 5].Value = "Si No Hay Dato";

        int row = 2;
        foreach (var homologacion in listaHomologacions)
        {
            worksheet.Cells[row, 1].Value = homologacion.NombreHomologado;
            worksheet.Cells[row, 2].Value = homologacion.MostrarWeb;
            worksheet.Cells[row, 3].Value = homologacion.TooltipWeb;
            worksheet.Cells[row, 4].Value = homologacion.MascaraDato;
            worksheet.Cells[row, 5].Value = homologacion.SiNoHayDato;
            row++;
        }

        worksheet.Cells.AutoFitColumns(); // Ajustar automáticamente las columnas

        var fileName = "Homologaciones_Export.xlsx";
        var fileBytes = package.GetAsByteArray();
        var fileBase64 = Convert.ToBase64String(fileBytes);

        await JSRuntime.InvokeVoidAsync("downloadExcel", fileName, fileBase64);
    }
    private async Task ExportarPDF()
    {
        objEventTracking.CodigoHomologacionMenu = "/campos-homologacion";
        objEventTracking.NombreAccion = "ExportarPDF";
        objEventTracking.NombreControl = "btnExportarPDF";
        objEventTracking.NombreUsuario = await iLocalStorageService.GetItemAsync<string>(Inicializar.Datos_Usuario_Local);
        objEventTracking.CodigoHomologacionRol = await iLocalStorageService.GetItemAsync<string>(Inicializar.Datos_Usuario_Codigo_Rol_Local);
        objEventTracking.ParametroJson = "{}";
        objEventTracking.UbicacionJson = "";
        await iBusquedaService.AddEventTrackingAsync(objEventTracking);

        if (listaHomologacions == null || !listaHomologacions.Any())
        {
            return;
        }

        using var memoryStream = new MemoryStream();
        var document = new Document(iTextSharp.text.PageSize.A4);
        var writer = PdfWriter.GetInstance(document, memoryStream);
        document.Open();

        var font = FontFactory.GetFont(FontFactory.HELVETICA_BOLD, 12);
        var table = new PdfPTable(5) { WidthPercentage = 100 };

        table.AddCell(new Phrase("Vista Código Homologado", font));
        table.AddCell(new Phrase("Texto a Mostrar en la Web", font));
        table.AddCell(new Phrase("Tooltip Web", font));
        table.AddCell(new Phrase("Tipo de Dato", font));
        table.AddCell(new Phrase("Si No Hay Dato", font));

        foreach (var homologacion in listaHomologacions)
        {
            table.AddCell(homologacion.NombreHomologado ?? "-");
            table.AddCell(homologacion.MostrarWeb ?? "-");
            table.AddCell(homologacion.TooltipWeb ?? "-");
            table.AddCell(homologacion.MascaraDato ?? "-");
            table.AddCell(homologacion.SiNoHayDato ?? "-");
        }

        document.Add(table);
        document.Close();

        var fileName = "Homologaciones_Export.pdf";
        var fileBase64 = Convert.ToBase64String(memoryStream.ToArray());

        await JSRuntime.InvokeVoidAsync("downloadFile", fileName, "application/pdf", fileBase64);
    }
}

@if (showModal)
{
    <div class="modal show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title inter-regular-normal-comet-14px">Confirmar Eliminación</h5>
                    <button type="button" class="btn-close inter-regular-normal-comet-14px" aria-label="Close"
                            @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <p class="label valign-text-middle inter-regular-normal-comet-14px">¿Está seguro que desea eliminar este registro?</p>
                </div>
                <div class="modal-footer">
                    <Button Color="ButtonColor.Danger" @onclick=@(() => ConfirmDelete())>Eliminar</Button>
                    <Button Color="ButtonColor.Secondary" @onclick=@(() => CloseModal())>Cancelar</Button>
                </div>
            </div>
        </div>
    </div>
}