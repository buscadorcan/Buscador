@page "/bitacora"
@layout AdminLayout
@using OfficeOpenXml
@using SharedApp.Dtos
@inject IJSRuntime JSRuntime
@using System.IO
@using System.Text
@using iTextSharp.text
@using iTextSharp.text.pdf


<PageTitle>Bitácora</PageTitle>

<h1 class="title headlineheadline2-h2">Bitácora</h1>

<!-- Primera fila: Selección de ONA, Fechas y Botones de Acción -->
<div class="row py-2 align-items-end">
    <!-- Combo Box ONA -->
    <div class="col-md-3">
        <label class="label valign-text-middle inter-regular-normal-comet-16px">Vista</label>
        <select id="onaSelect" class="form-control inter-regular-normal-comet-14px" @bind="selectedOna">
            <option value="" selected disabled>Seleccionar Vista</option>
            @if (listaONAs != null)
            {
                @foreach (var opcion in listaONAs)
                {
                    <option value="@opcion.IdONA">@opcion.Siglas</option>
                }
            }
        </select>
    </div>

    <!-- Calendario Fecha Inicio -->
    <div class="col-md-2">
        <label class="label valign-text-middle inter-regular-normal-comet-16px">Fecha Inicio</label>
        <input type="date" class="form-control inter-regular-normal-comet-14px"
               @bind="fechaInicio" @bind:event="onchange">
    </div>

    <!-- Calendario Fecha Fin -->
    <div class="col-md-2">
        <label class="label valign-text-middle inter-regular-normal-comet-16px">Fecha Fin</label>
        <input type="date" class="form-control inter-regular-normal-comet-14px"
               @bind="fechaFin" @bind:event="onchange">
    </div>

    <!-- Contenedor para alinear los botones a la derecha -->
    <div class="col-md-5 d-flex justify-content-end">
        <!-- Botón Buscar -->
        <Button id="btnBuscar" Type="ButtonType.Button" Color="ButtonColor.Primary" Outline="true" class="me-2"
                @onclick="async () => await BuscarDatos()">
            <Icon Name="IconName.Search" />
            <span class="ms-2 btnExp">Buscar</span>
        </Button>

        <!-- Botón Eliminar -->
        <Button id="btnEliminar" Type="ButtonType.Button" Color="ButtonColor.Danger" Outline="true"
                @onclick="async () => await EliminarRegistro()">
            <Icon Name="IconName.Trash" />
            <span class="ms-2 btnExp">Eliminar</span>
        </Button>
    </div>
</div>

<!-- Segunda fila: Botones de exportación -->
<div class="text-end my-3 d-flex justify-content-between">
    <div class="d-flex">
        <!-- Botón Exportar a Excel -->
        <Button Type="ButtonType.Button" Color="ButtonColor.Primary" Outline="true" class="me-2" @onclick="ExportarExcel">
            <Icon Name="IconName.FileEarmarkArrowDown" />
            <span class="ms-2 btnExp">Exportar a Excel</span>
        </Button>

        <!-- Botón Exportar a PDF -->
        <Button Type="ButtonType.Button" Color="ButtonColor.Danger" Outline="true" class="me-2" @onclick="ExportarPDF">
            <Icon Name="IconName.FileEarmarkPdf" />
            <span class="ms-2 btnExp">Exportar a PDF</span>
        </Button>
    </div>
</div>

<div class="table table-1">
    <div class="table-heading table-1">
        <article class="table-heading-1 table-heading-5 sortable-header" @onclick="() => OrdenarPor(nameof(LogMigracionDto.IdLogMigracion))">
            <div class="header-label-1">
                <div class="label-heading headingheadline5-h5">
                    Cod. Homologación Rol @(sortColumn == nameof(LogMigracionDto.IdLogMigracion) ? (sortAscending ? "⬆" : "⬇") : "")
                </div>
            </div>
        </article>

        <article class="table-heading-2 table-heading-5 sortable-header" @onclick="() => OrdenarPor(nameof(LogMigracionDto.EsquemaVista))">
            <div class="header-label">
                <div class="label-heading headingheadline5-h5">
                    Cod. Homologación Menú @(sortColumn == nameof(LogMigracionDto.EsquemaVista) ? (sortAscending ? "⬆" : "⬇") : "")
                </div>
            </div>
        </article>

        <article class="table-heading-1 table-heading-5 sortable-header" @onclick="() => OrdenarPor(nameof(LogMigracionDto.Estado))">
            <div class="header-label">
                <div class="label-heading headingheadline5-h5">
                    Nombre Usuario @(sortColumn == nameof(LogMigracionDto.Estado) ? (sortAscending ? "⬆" : "⬇") : "")
                </div>
            </div>
        </article>

        <article class="table-heading-1 table-heading-5 sortable-header" @onclick="() => OrdenarPor(nameof(LogMigracionDto.Inicio))">
            <div class="header-label">
                <div class="label-heading headingheadline5-h5">
                    Nombre Control @(sortColumn == nameof(LogMigracionDto.Inicio) ? (sortAscending ? "⬆" : "⬇") : "")
                </div>
            </div>
        </article>

        <article class="table-heading-3 table-heading-5 sortable-header" @onclick="() => OrdenarPor(nameof(LogMigracionDto.Final))">
            <div class="header-label">
                <div class="label-heading headingheadline5-h5">
                    Nombre Acción @(sortColumn == nameof(LogMigracionDto.Final) ? (sortAscending ? "⬆" : "⬇") : "")
                </div>
            </div>
        </article>

        <article class="table-heading-4 table-heading-5 sortable-header" @onclick="() => OrdenarPor(nameof(LogMigracionDto.ExcelFileName))">
            <div class="header-label">
                <div class="label-heading headingheadline5-h5">
                    Ubicación Json @(sortColumn == nameof(LogMigracionDto.ExcelFileName) ? (sortAscending ? "⬆" : "⬇") : "")
                </div>
            </div>
        </article>

        <article class="table-heading-5 table-heading-5 sortable-header" @onclick="() => OrdenarPor(nameof(LogMigracionDto.Observacion))">
            <div class="header-label">
                <div class="label-heading headingheadline5-h5">
                    Parametro Json @(sortColumn == nameof(LogMigracionDto.Observacion) ? (sortAscending ? "⬆" : "⬇") : "")
                </div>
            </div>
        </article>
    </div>

    @if (listasHevd != null && listasHevd.Any())
    {
        <div class="content">
            @foreach (var item in PaginatedItems)
            {
                <div class="row">
                    <div class="componente">
                        <div class="row-1 row-12">
                            <div class="ads-rules-list">
                                <div class="cell">
                                    <div class="migration-id bodybody-small">@item.IdLogMigracion</div>
                                </div>
                                <div class="cell cell-1">
                                    <div class="esquema-vista bodybody-small">@item.EsquemaVista</div>
                                </div>
                                <div class="cell cell-1">
                                    <div class="status bodybody-small">@item.Estado</div>
                                </div>
                                <div class="cell cell-1">
                                    <div class="status bodybody-small">@item.Inicio</div>
                                </div>
                                <div class="cell cell-1">
                                    <div class="status bodybody-small">@item.Final</div>
                                </div>
                                <div class="cell cell-1 landing-page-3">
                                    <div class="file-name bodybody-small" style="width:225px !important">@item.ExcelFileName</div>
                                </div>
                                <div class="cell cell-1 landing-page-3">
                                    <p class="error-message bodybody-small">@item.Observacion</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Controles de paginación -->
        <div class="pagination-container">
            <button class="btn btn-primary btn-sm" @onclick="PreviousPage" disabled="@(!CanGoPrevious)">
                ⏪
            </button>

            <span class="pagination-text inter-regular-normal-comet-14px">Página @CurrentPage de @TotalPages</span>

            <button class="btn btn-primary btn-sm" @onclick="NextPage" disabled="@(!CanGoNext)">
                ⏩
            </button>
        </div>

    }
    else
    {
        <p class="label valign-text-middle inter-regular-normal-comet-16px">No hay datos disponibles.</p>
    }
</div>

@code {
    private string sortColumn = nameof(LogMigracionDto.IdLogMigracion);
    private bool sortAscending = true;

    private void OrdenarPor(string column)
    {
        if (sortColumn == column)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortColumn = column;
            sortAscending = true;
        }

        listasHevd = sortAscending
            ? listasHevd.OrderBy(x => x.GetType().GetProperty(sortColumn)?.GetValue(x, null)).ToList()
            : listasHevd.OrderByDescending(x => x.GetType().GetProperty(sortColumn)?.GetValue(x, null)).ToList();
    }

    private async Task ExportarExcel()
    {
        objEventTracking.CodigoHomologacionMenu = "/migracion-excel";
        objEventTracking.NombreAccion = "ExportarExcel";
        objEventTracking.NombreControl = "btnExportarExcel";
        objEventTracking.NombreUsuario = await iLocalStorageService.GetItemAsync<string>(Inicializar.Datos_Usuario_Local);
        objEventTracking.CodigoHomologacionRol = await iLocalStorageService.GetItemAsync<string>(Inicializar.Datos_Usuario_Codigo_Rol_Local);
        objEventTracking.ParametroJson = "{}";
        objEventTracking.UbicacionJson = "";
        await iBusquedaService.AddEventTrackingAsync(objEventTracking);

        if (listasHevd == null || !listasHevd.Any())
        {
            return;
        }

        ExcelPackage.LicenseContext = LicenseContext.NonCommercial; // Configurar licencia para EPPlus

        using var package = new ExcelPackage();
        var worksheet = package.Workbook.Worksheets.Add("Migraciones");

        // Agregar encabezados
        worksheet.Cells[1, 1].Value = "Migración";
        worksheet.Cells[1, 2].Value = "EsquemaVista";
        worksheet.Cells[1, 3].Value = "Estado";
        worksheet.Cells[1, 4].Value = "Inicio Migración";
        worksheet.Cells[1, 5].Value = "Final Migración";
        worksheet.Cells[1, 6].Value = "Nombre archivo";
        worksheet.Cells[1, 7].Value = "Error";

        int row = 2;
        foreach (var item in listasHevd)
        {
            worksheet.Cells[row, 1].Value = item.IdLogMigracion;
            worksheet.Cells[row, 2].Value = item.EsquemaVista;
            worksheet.Cells[row, 3].Value = item.Estado;
            worksheet.Cells[row, 4].Value = item.Inicio;
            worksheet.Cells[row, 5].Value = item.Final;
            worksheet.Cells[row, 6].Value = item.ExcelFileName;
            worksheet.Cells[row, 7].Value = item.Observacion;
            row++;
        }

        worksheet.Cells.AutoFitColumns(); // Ajustar automáticamente las columnas

        var fileName = "Migraciones_Export.xlsx";
        var fileBytes = package.GetAsByteArray();
        var fileBase64 = Convert.ToBase64String(fileBytes);

        await JSRuntime.InvokeVoidAsync("downloadExcel", fileName, fileBase64);
    }
    private async Task ExportarPDF()
    {
        objEventTracking.CodigoHomologacionMenu = "/migracion-excel";
        objEventTracking.NombreAccion = "ExportarPDF";
        objEventTracking.NombreControl = "btnExportarPDF";
        objEventTracking.NombreUsuario = await iLocalStorageService.GetItemAsync<string>(Inicializar.Datos_Usuario_Local);
        objEventTracking.CodigoHomologacionRol = await iLocalStorageService.GetItemAsync<string>(Inicializar.Datos_Usuario_Codigo_Rol_Local);
        objEventTracking.ParametroJson = "{}";
        objEventTracking.UbicacionJson = "";
        await iBusquedaService.AddEventTrackingAsync(objEventTracking);

        if (listasHevd == null || !listasHevd.Any())
        {
            return;
        }

        using var memoryStream = new MemoryStream();
        var document = new Document(iTextSharp.text.PageSize.A4.Rotate()); // Documento en horizontal
        var writer = PdfWriter.GetInstance(document, memoryStream);
        document.Open();

        var font = FontFactory.GetFont(FontFactory.HELVETICA_BOLD, 12);
        var table = new PdfPTable(7) { WidthPercentage = 100 }; // Cambié a 7 columnas

        // Encabezados
        table.AddCell(new Phrase("Migración", font));
        table.AddCell(new Phrase("EsquemaVista", font));
        table.AddCell(new Phrase("Estado", font));
        table.AddCell(new Phrase("Inicio Migración", font));
        table.AddCell(new Phrase("Final Migración", font));
        table.AddCell(new Phrase("Nombre archivo", font));
        table.AddCell(new Phrase("Error", font));

        // Ajustar el ancho de las columnas
        float[] widths = new float[] { 15f, 15f, 15f, 15f, 15f, 20f, 30f };
        table.SetWidths(widths);

        // Llenar la tabla con los datos
        foreach (var item in listasHevd)
        {
            table.AddCell(new Phrase(item.IdLogMigracion.ToString()));
            table.AddCell(new Phrase(item.EsquemaVista));
            table.AddCell(new Phrase(item.Estado));
            table.AddCell(new Phrase(item.Inicio.ToString()));
            table.AddCell(new Phrase(item.Final.ToString()));
            table.AddCell(new Phrase(item.ExcelFileName));
            table.AddCell(new Phrase(item.Observacion ?? "-"));
        }

        document.Add(table);
        document.Close();

        var fileName = "Migraciones_Export.pdf";
        var fileBase64 = Convert.ToBase64String(memoryStream.ToArray());

        await JSRuntime.InvokeVoidAsync("downloadFile", fileName, "application/pdf", fileBase64);
    }
}