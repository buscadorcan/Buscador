@page "/menu-config-lista"
@layout AdminLayout
@using Microsoft.AspNetCore.Authorization;
@using OfficeOpenXml;
@using SharedApp.Models.Dtos;
@using System.Text;
@attribute [Authorize]
@inject IJSRuntime JSRuntime
@using System.IO;
@using iTextSharp.text;
@using iTextSharp.text.pdf;

<style>
    .switch {
        position: relative;
        display: inline-block;
        width: 34px;
        height: 20px;
    }

        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: .4s;
        border-radius: 20px;
    }

        .slider:before {
            position: absolute;
            content: "";
            height: 14px;
            width: 14px;
            left: 4px;
            bottom: 3px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }

    input:checked + .slider {
        background-color: #2196F3;
    }

        input:checked + .slider:before {
            transform: translateX(14px);
        }

</style>

<!-- Card Header -->
<div class="general title">
    <h2 class="title headlineheadline2-h2">Administración de Menú</h2>
</div>

<!-- Botones de Exportar y Crear Nuevo con Buscador -->
<div class="text-end my-3 d-flex justify-content-between">
    <div class="d-flex">
        <!-- Botón Exportar a Excel -->
        <Button Type="ButtonType.Button" Color="ButtonColor.Primary" Outline="true" class="me-2" @onclick="ExportarExcel">
            <Icon Name="IconName.FileEarmarkArrowDown" />
            <span class="ms-2 btnExp">Exportar a Excel</span>
        </Button>

        <!-- Botón Exportar a PDF -->
        <Button Type="ButtonType.Button" Color="ButtonColor.Danger" Outline="true" class="me-2" @onclick="ExportarPDF">
            <Icon Name="IconName.FileEarmarkPdf" />
            <span class="ms-2 btnExp">Exportar a PDF</span>
        </Button>

        <!-- Buscador -->
        <InputText @bind-Value="filtroBusqueda" class="form-control inter-regular-normal-comet-14px small-input" placeholder="Buscar por Rol o Menú" @oninput="FiltrarLista" style="width: 250px;" />
    </div>

    <!-- Botón Crear Nuevo -->
    <div class="button-container">
        <Button Type="ButtonType.Link" class="button-2" To="/nuevo-config-menu">
            <div class="button-3 headingheadline4-h4">Nuevo Menú</div>
        </Button>
    </div>
</div>

<div class="tabla-1 tabla-2">
    <div class="table-heading table-1">
        <div class="table-heading-1 table-heading-11 sortable-header" style="width:40% !important" @onclick="() => OrdenarPor(nameof(MenuRolDto.Rol))">
            <div class="header-label-1 header-label-4">
                <div class="label-heading headingheadline5-h5">
                    Rol @(sortColumn == nameof(MenuRolDto.Rol) ? (sortAscending ? "⬆" : "⬇") : "")
                </div>
            </div>
        </div>

        <div class="table-heading-1 table-heading-11 sortable-header" style="width:40% !important" @onclick="() => OrdenarPor(nameof(MenuRolDto.Menu))">
            <div class="header-label-1 header-label-4">
                <div class="label-heading headingheadline5-h5">
                    Menú @(sortColumn == nameof(MenuRolDto.Menu) ? (sortAscending ? "⬆" : "⬇") : "")
                </div>
            </div>
        </div>

        <div class="table-heading-1 table-heading-11 sortable-header" style="width:20% !important" @onclick="() => OrdenarPor(nameof(MenuRolDto.Estado))">
            <div class="header-label-1 header-label-4">
                <div class="label-heading headingheadline5-h5">
                    Estado @(sortColumn == nameof(MenuRolDto.Estado) ? (sortAscending ? "⬆" : "⬇") : "")
                </div>
            </div>
        </div>
    </div>

    @if (listaMenus != null && listaMenus.Any())
    {
        <div class="content content-2">
            @foreach (var menu in PaginatedItems)
            {
                <div class="row row-15">
                    <div class="componente">
                        <div class="row-1 row-15">
                            <div class="ads-rules-list">
                                <div class="cell cell-1" style="width:40% !important">
                                    <div class="cell-text cell-1 bodybody-small">@menu.Rol</div>
                                </div>
                                <div class="cell cell-1" style="width:40% !important">
                                    <div class="cell-text cell-1 bodybody-small">@menu.Menu</div>
                                </div>
                                <div class="cell cell-1" style="width:20% !important">
                                    <label class="switch">
                                        <input type="checkbox" checked="@((menu.Estado == "A"))" @onclick="@(() => ConfirmDelete(menu))" />
                                        <span class="slider round"></span>
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        <!-- Controles de paginación -->
        <div class="pagination-container">
            <button class="btn btn-primary btn-sm" @onclick="PreviousPage" disabled="@(!CanGoPrevious)">
                ⏪
            </button>

            <span class="pagination-text inter-regular-normal-comet-14px">Página @CurrentPage de @TotalPages</span>

            <button class="btn btn-primary btn-sm" @onclick="NextPage" disabled="@(!CanGoNext)">
                ⏩
            </button>
        </div>
    }
    else
    {
        <p class="label valign-text-middle inter-regular-normal-comet-16px">No hay datos disponibles.</p>
    }
</div>


@code {
    private string filtroBusqueda = "";

    private void FiltrarLista(ChangeEventArgs e)
    {
        filtroBusqueda = e.Value?.ToString()?.ToLower() ?? "";

        if (string.IsNullOrWhiteSpace(filtroBusqueda))
        {
            // Restaurar la lista original y la paginación
            listaMenus = new List<MenuRolDto>(listaMenusOriginal);
        }
        else
        {
            // Aplicar el filtro sobre la lista original
            listaMenus = listaMenusOriginal
                .Where(m => m.Rol.ToLower().Contains(filtroBusqueda) || m.Menu.ToLower().Contains(filtroBusqueda))
                .ToList();
        }

        // Reiniciar a la primera página para mostrar resultados correctamente
        CurrentPage = 1;
    }


    private string sortColumn = nameof(MenuRolDto.Rol);
    private bool sortAscending = true;
    private void OrdenarPor(string column)
    {
        if (sortColumn == column)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortColumn = column;
            sortAscending = true;
        }

        listaMenus = sortAscending
            ? listaMenus.OrderBy(x => x.GetType().GetProperty(sortColumn)?.GetValue(x, null)).ToList()
            : listaMenus.OrderByDescending(x => x.GetType().GetProperty(sortColumn)?.GetValue(x, null)).ToList();
    }

    private async Task ExportarExcel()
    {
        if (listaMenus == null || !listaMenus.Any()) return;

        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
        using var package = new ExcelPackage();
        var worksheet = package.Workbook.Worksheets.Add("Menús");

        worksheet.Cells[1, 1].Value = "Rol";
        worksheet.Cells[1, 2].Value = "Menú";
        worksheet.Cells[1, 3].Value = "Estado";

        int row = 2;
        foreach (var menu in listaMenus)
        {
            worksheet.Cells[row, 1].Value = menu.Rol;
            worksheet.Cells[row, 2].Value = menu.Menu;
            worksheet.Cells[row, 3].Value = menu.Estado == "A" ? "Activo" : "Inactivo";
            row++;
        }

        worksheet.Cells.AutoFitColumns();
        var fileBytes = package.GetAsByteArray();
        var fileBase64 = Convert.ToBase64String(fileBytes);
        await JSRuntime.InvokeVoidAsync("downloadExcel", "Menus_Export.xlsx", fileBase64);
    }

    private async Task ExportarPDF()
    {
        if (listaMenus == null || !listaMenus.Any()) return;

        using var memoryStream = new MemoryStream();
        var document = new Document(iTextSharp.text.PageSize.A4);
        PdfWriter.GetInstance(document, memoryStream);
        document.Open();

        var table = new PdfPTable(3) { WidthPercentage = 100 };
        table.AddCell("Rol");
        table.AddCell("Menú");
        table.AddCell("Estado");

        foreach (var menu in listaMenus)
        {
            table.AddCell(menu.Rol);
            table.AddCell(menu.Menu);
            table.AddCell(menu.Estado == "A" ? "Activo" : "Inactivo");
        }

        document.Add(table);
        document.Close();

        var fileBase64 = Convert.ToBase64String(memoryStream.ToArray());
        await JSRuntime.InvokeVoidAsync("downloadFile", "Menus_Export.pdf", "application/pdf", fileBase64);
    }
}

