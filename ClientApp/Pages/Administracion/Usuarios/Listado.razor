@page "/usuarios"
@layout AdminLayout
@using Blazored.LocalStorage
@using BlazorBootstrap
@using Microsoft.AspNetCore.Authorization
@using OfficeOpenXml
@using SharedApp.Models.Dtos
@inject ILocalStorageService LocalStorageService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using System.IO
@using System.Text
@using iTextSharp.text
@using iTextSharp.text.pdf
 
<PageTitle>Usuarios</PageTitle>

    <!-- Card Header -->
    <div class="general title">
        <h2 class="title headlineheadline2-h2">Administración de Usuarios</h2>
    </div>

    <!-- Botón Nuevo -->
@if (!isRolRead)
{
    <div class="text-end my-3 d-flex justify-content-between">
        <!-- Grupo de botones de exportación -->
        <div class="d-flex gap-2">
            <!-- Botón Exportar a Excel -->
            <Button id="btnExportarExcel" Type="ButtonType.Button" Color="ButtonColor.Primary" Outline="true" @onclick="ExportarExcel">
                <Icon Name="IconName.FileEarmarkArrowDown" />
                <span class="ms-2 btnExp">Exportar a Excel</span>
            </Button>

            <!-- Botón Exportar a PDF -->
            <Button id="btnExportarPDF" Type="ButtonType.Button" Color="ButtonColor.Danger" Outline="true" @onclick="ExportarPDF">
                <Icon Name="IconName.FileEarmarkPdf" />
                <span class="ms-2 btnExp">Exportar a PDF</span>
            </Button>
        </div>

        <!-- Botón Crear Nuevo -->
        <div class="button-container">
            <Button Type="ButtonType.Link" class="button-2" To="/nuevo-usuario">
                <div class="button-3 headingheadline4-h4">Crear usuario</div>
            </Button>
        </div>
    </div>
}

<div class="table table-1">
    <div class="table-heading table-1">
        <!-- Encabezados con funcionalidad de ordenamiento -->
        @foreach (var column in new[]
        {
        (nameof(UsuarioDto.Nombre), "Nombre"),
        (nameof(UsuarioDto.Apellido), "Apellido"),
        (nameof(UsuarioDto.Telefono), "Teléfono"),
        (nameof(UsuarioDto.Email), "Email"),
        (nameof(UsuarioDto.Rol), "Rol"),
        (nameof(UsuarioDto.RazonSocial), "Razón Social"),
        (nameof(UsuarioDto.Estado), "Estado")
        })
        {
            <div class="table-heading-1 table-heading-10 sortable-header" @onclick="() => OrdenarPor(column.Item1)">
                <div class="header-label-1 header-label-4">
                    <div class="label-heading headingheadline5-h5">
                        @column.Item2 @(sortColumn == column.Item1 ? (sortAscending ? "⬆" : "⬇") : "")
                    </div>
                </div>
            </div>
        }

        <!-- Columnas sin ordenamiento (Editar y Eliminar) -->
        <div class="table-heading-1 table-heading-10">
            <div class="header-label-1 header-label-4">
                <div class="label-heading headingheadline5-h5">Editar</div>
            </div>
        </div>
        <div class="table-heading-1 table-heading-10">
            <div class="header-label-1 header-label-4">
                <div class="label-heading headingheadline5-h5">Eliminar</div>
            </div>
        </div>
    </div>

    @if (listaUsuarios != null && listaUsuarios.Any())
    {
        <div class="content content-2">
            @foreach (var usuario in PaginatedItems)
            {
                <div class="row row-15">
                    <div class="componente">
                        <div class="row-1 row-15">
                            <div class="ads-rules-list">
                                <div class="cell cell-1"><div class="cell-text cell-1 bodybody-small">@usuario.Nombre</div></div>
                                <div class="cell cell-1"><div class="cell-text cell-1 bodybody-small">@usuario.Apellido</div></div>
                                <div class="cell cell-1"><div class="cell-text cell-1 bodybody-small">@usuario.Telefono</div></div>
                                <div class="cell cell-1"><div class="cell-text cell-1 bodybody-small">@usuario.Email</div></div>
                                <div class="cell cell-1"><div class="cell-text cell-1 bodybody-small">@usuario.Rol</div></div>
                                <div class="cell cell-1"><div class="cell-text cell-1 bodybody-small">@usuario.RazonSocial</div></div>

                                <!-- Estado con Check o X -->
                                <div class="cell cell-1">
                                    @if (usuario.Estado == "A")
                                    {
                                        <span class="estado-activo">✔</span>
                                    }
                                    else
                                    {
                                        <span class="estado-inactivo">✖</span>
                                    }
                                </div>

                                <!-- Botón Editar -->
                                <div class="cell cell-1">
                                    <Tooltip Title="Editar registro">
                                        <Button Type="ButtonType.Link" Color="ButtonColor.Secondary" Outline="true" Size="ButtonSize.Small" Disabled="isRolRead"
                                                @onclick=@(() => EditarUsuario(usuario))>
                                            <Icon Name="IconName.PencilSquare" />
                                        </Button>
                                    </Tooltip>
                                </div>

                                <!-- Botón Eliminar -->
                                <div class="cell cell-1">
                                    <Tooltip Title="Eliminar registro">
                                        <Button id="btnEliminar" @ref="saveButton" Type="ButtonType.Button" Color="ButtonColor.Danger" Outline="true" Disabled="isRolRead"
                                                Size="ButtonSize.Small" @onclick=@(() => OpenDeleteModal(usuario.IdUsuario))>
                                            <Icon Name="IconName.Trash" />
                                        </Button>
                                    </Tooltip>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        <!-- Controles de paginación -->
        <div class="pagination-container">
            <button class="btn btn-primary btn-sm" @onclick="PreviousPage" disabled="@(!CanGoPrevious)">
                ⏪
            </button>

            <span class="pagination-text inter-regular-normal-comet-14px">Página @CurrentPage de @TotalPages</span>

            <button class="btn btn-primary btn-sm" @onclick="NextPage" disabled="@(!CanGoNext)">
                ⏩
            </button>
        </div>
    }
    else
    {
        <p class="label valign-text-middle inter-regular-normal-comet-16px">No hay datos disponibles.</p>
    }
</div>


@code {
    private string sortColumn = nameof(UsuarioDto.Nombre);
    private bool sortAscending = true;

    private void OrdenarPor(string columnName)
    {
        if (sortColumn == columnName)
        {
            sortAscending = !sortAscending; // Invierte el orden si es la misma columna
        }
        else
        {
            sortColumn = columnName;
            sortAscending = true;
        }

        // Ordenar la lista
        listaUsuarios = sortAscending
            ? listaUsuarios.OrderBy(u => typeof(UsuarioDto).GetProperty(sortColumn)?.GetValue(u, null)).ToList()
            : listaUsuarios.OrderByDescending(u => typeof(UsuarioDto).GetProperty(sortColumn)?.GetValue(u, null)).ToList();
    }
    private async Task ExportarExcel()
    {
        objEventTracking.CodigoHomologacionMenu = "/usuarios";
        objEventTracking.NombreAccion = "ExportarExcel";
        objEventTracking.NombreControl = "btnExportarExcel";
        objEventTracking.NombreUsuario = await iLocalStorageService.GetItemAsync<string>(Inicializar.Datos_Usuario_Local);
        objEventTracking.CodigoHomologacionRol = await iLocalStorageService.GetItemAsync<string>(Inicializar.Datos_Usuario_Codigo_Rol_Local);
        objEventTracking.ParametroJson = "{}";
        objEventTracking.UbicacionJson = "";
        await iBusquedaService.AddEventTrackingAsync(objEventTracking);

        if (listaUsuarios == null || !listaUsuarios.Any())
        {
            return;
        }

        ExcelPackage.LicenseContext = LicenseContext.NonCommercial; // Configurar licencia para EPPlus

        using var package = new ExcelPackage();
        var worksheet = package.Workbook.Worksheets.Add("Usuarios");

        // Agregar encabezados
        worksheet.Cells[1, 1].Value = "Nombre";
        worksheet.Cells[1, 2].Value = "Apellido";
        worksheet.Cells[1, 3].Value = "Teléfono";
        worksheet.Cells[1, 4].Value = "Email";
        worksheet.Cells[1, 5].Value = "Rol";
        worksheet.Cells[1, 6].Value = "Razón Social";
        worksheet.Cells[1, 7].Value = "Estado";

        int row = 2;
        foreach (var usuario in listaUsuarios)
        {
            worksheet.Cells[row, 1].Value = usuario.Nombre;
            worksheet.Cells[row, 2].Value = usuario.Apellido;
            worksheet.Cells[row, 3].Value = usuario.Telefono;
            worksheet.Cells[row, 4].Value = usuario.Email;
            worksheet.Cells[row, 5].Value = usuario.Rol;
            worksheet.Cells[row, 6].Value = usuario.RazonSocial;
            worksheet.Cells[row, 7].Value = usuario.Estado == "A" ? "Activo" : "Inactivo";
            row++;
        }

        worksheet.Cells.AutoFitColumns(); // Ajustar automáticamente las columnas

        var fileName = "Usuarios_Export.xlsx";
        var fileBytes = package.GetAsByteArray();
        var fileBase64 = Convert.ToBase64String(fileBytes);

        await JSRuntime.InvokeVoidAsync("downloadExcel", fileName, fileBase64);
    }
    private async Task ExportarPDF()
    {
        objEventTracking.CodigoHomologacionMenu = "/usuarios";
        objEventTracking.NombreAccion = "ExportarPDF";
        objEventTracking.NombreControl = "btnExportarPDF";
        objEventTracking.NombreUsuario = await iLocalStorageService.GetItemAsync<string>(Inicializar.Datos_Usuario_Local);
        objEventTracking.CodigoHomologacionRol = await iLocalStorageService.GetItemAsync<string>(Inicializar.Datos_Usuario_Codigo_Rol_Local);
        objEventTracking.ParametroJson = "{}";
        objEventTracking.UbicacionJson = "";
        await iBusquedaService.AddEventTrackingAsync(objEventTracking);

        if (listaUsuarios == null || !listaUsuarios.Any())
        {
            return;
        }

        using var memoryStream = new MemoryStream();
        var document = new Document(iTextSharp.text.PageSize.A4);
        var writer = PdfWriter.GetInstance(document, memoryStream);
        document.Open();

        var font = FontFactory.GetFont(FontFactory.HELVETICA_BOLD, 12);
        var table = new PdfPTable(7) { WidthPercentage = 100 };

        table.AddCell(new Phrase("Nombre", font));
        table.AddCell(new Phrase("Apellido", font));
        table.AddCell(new Phrase("Teléfono", font));
        table.AddCell(new Phrase("Email", font));
        table.AddCell(new Phrase("Rol", font));
        table.AddCell(new Phrase("Razón Social", font));
        table.AddCell(new Phrase("Estado", font));

        foreach (var usuario in listaUsuarios)
        {
            table.AddCell(usuario.Nombre);
            table.AddCell(usuario.Apellido);
            table.AddCell(usuario.Telefono);
            table.AddCell(usuario.Email);
            table.AddCell(usuario.Rol);
            table.AddCell(usuario.RazonSocial);
            table.AddCell(usuario.Estado == "A" ? "Activo" : "Inactivo");
        }

        document.Add(table);
        document.Close();

        var fileName = "Usuarios_Export.pdf";
        var fileBase64 = Convert.ToBase64String(memoryStream.ToArray());

        await JSRuntime.InvokeVoidAsync("downloadFile", fileName, "application/pdf", fileBase64);
    }
}
@if (showModal)
{
    <div class="modal show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title inter-regular-normal-comet-14px">Confirmar Eliminación</h5>
                    <button type="button" class="btn-close inter-regular-normal-comet-14px" aria-label="Close"
                            @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <p class="label valign-text-middle inter-regular-normal-comet-14px">¿Está seguro que desea eliminar este registro?</p>
                </div>
                <div class="modal-footer">
                    <Button Color="ButtonColor.Danger" @onclick=@(() => ConfirmDelete())>Eliminar</Button>
                    <Button Color="ButtonColor.Secondary" @onclick=@(() => CloseModal())>Cancelar</Button>
                </div>
            </div>
        </div>
    </div>
}
