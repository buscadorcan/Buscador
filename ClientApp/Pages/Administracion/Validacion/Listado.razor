@page "/validacion"
@layout AdminLayout
@using OfficeOpenXml
@using SharedApp.Models.Dtos
@inject IJSRuntime JSRuntime
@using System.IO
@using System.Text
@using iTextSharp.text
@using iTextSharp.text.pdf

<PageTitle>Homologación</PageTitle>

<h1 class="title headlineheadline2-h2">Validación de Campos</h1>

<div class="row py-2">
    <div class="col-md-4">
        <div>
            <label class="label valign-text-middle inter-regular-normal-comet-16px">Ona</label>
        </div>
        <select id="onaSelect" class="form-control inter-regular-normal-comet-14px" @onchange="CambiarSeleccionOna" style="margin-top: 2% !important;">
            <option value="" selected disabled>Seleccionar Ona</option>
            @if (listaONAs != null)
            {
                @foreach (var opcion in listaONAs)
                {
                    <option value="@opcion.IdONA">@opcion.Siglas</option>
                }
            }
        </select>
    </div>
    <div class="col-md-4">
        <div>
            <label class="label valign-text-middle inter-regular-normal-comet-16px">Esquemas</label>
        </div>
        <div class="form-group" style="margin-top: 2% !important;">
            <div class="form-group">
                <select id="esquemaSelect" class="form-control inter-regular-normal-comet-14px"
                        @onchange="async (e) => await HandleEsquemaSelectionChange(e)">
                    <option value="" selected disabled>Seleccionar ESQ</option>
                    @if (listaEsquemasOna != null)
                    {
                        @foreach (var opcion in listaEsquemasOna)
                        {
                            <option value="@opcion.IdEsquema">
                                @if (NombresVistas != null && NombresVistas.Any(c => c.Equals(opcion.MostrarWeb)))
                                {
                                    <Icon Name="IconName.Check" />
                                }
                                @opcion.MostrarWeb
                            </option>
                        }
                    }
                </select>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div>
            <label class="label valign-text-middle inter-regular-normal-comet-16px">Vista Origen</label>
        </div>
        <input type="text" class="form-control inter-regular-normal-comet-14px" placeholder="" @bind="nombreSugerido" style="margin-top: 2% !important;" />
    </div>
        
</div>

<div class="col-md-12">
    <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-2">
        @if (listasHevd?.Count > 0)
        {
            <div class="d-flex justify-content-between my-3 w-100">
                <!-- Grupo de botones de exportación -->
                <div class="d-flex gap-2">
                    <!-- Botón Exportar a Excel -->
                    <Button Type="ButtonType.Button" Color="ButtonColor.Primary" Outline="true" @onclick="ExportarExcel">
                        <Icon Name="IconName.FileEarmarkArrowDown" />
                        <span class="ms-2 btnExp">Exportar a Excel</span>
                    </Button>

                    <!-- Botón Exportar a PDF -->
                    <Button Type="ButtonType.Button" Color="ButtonColor.Danger" Outline="true" @onclick="ExportarPDF">
                        <Icon Name="IconName.FileEarmarkPdf" />
                        <span class="ms-2 btnExp">Exportar a PDF</span>
                    </Button>
                </div>

                <!-- Botón Agregar Registro -->
                <div class="button-container">
                    <Button @ref="validateButton" class="button-2 label valign-text-middle inter-regular-normal-comet-14px" @onclick="async () => await ValidarDatos()">
                        <div class="button-3 headingheadline4-h4">Agregar Registro</div>
                    </Button>
                </div>
            </div>
        }
    </div>
</div>

<div class="table table-1">
    <div class="table-heading table-1">
        <div class="table-heading-1 table-heading-10" style="width:50% !important">
            <div class="header-label-1 header-label-4">
                <div class="label-heading headingheadline5-h5">Nombre Campo Esquema</div>
                
            </div>
        </div>
        <div class="table-heading-1 table-heading-10" style="width:50% !important">
            <div class="header-label-1 header-label-4">
                <div class="label-heading headingheadline5-h5">Nombre Campo Vista</div>
                
            </div>
        </div>
        <div class="table-heading-1 table-heading-10" style="width:20% !important">
            <div class="header-label-1 header-label-4">
                <div class="label-heading headingheadline5-h5">Existe</div>
                
            </div>
        </div>
    </div>

    @if (listasHevd != null && listasHevd.Any())
    {
        <div class="content content-2">
            @foreach (var esquema in listasHevd)
            {
                <div class="row row-15">
                    <div class="componente">
                        <div class="row-1 row-15">
                            <div class="ads-rules-list">
                                <div class="cell cell-1" style="width:50% !important">
                                    <div class="cell-text cell-1 bodybody-small">@esquema.NombreEsquema</div>
                                </div>
                                <div class="cell cell-1" style="width:50% !important">
                                    <input class="form-control inter-regular-normal-comet-14px" @bind="esquema.NombreVista" disabled="@enabledCeldas" />
                                </div>
                                <!-- Estado con Check o X -->
                                <div class="cell cell-1" style="width:23% !important">
                                    @if (esquema.IsValid)
                                    {
                                        <span class="estado-activo">✔</span>
                                    }
                                    else
                                    {
                                        <span class="estado-inactivo">✖</span>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <p class="label valign-text-middle inter-regular-normal-comet-16px">No hay datos disponibles.</p>
    }
</div>

@code {
    private async Task ExportarExcel()
    {
        if (listasHevd == null || !listasHevd.Any())
        {
            return;
        }

        ExcelPackage.LicenseContext = LicenseContext.NonCommercial; // Configurar licencia para EPPlus

        using var package = new ExcelPackage();
        var worksheet = package.Workbook.Worksheets.Add("Esquemas");

        // Agregar encabezados
        worksheet.Cells[1, 1].Value = "Nombre Campo Esquema";
        worksheet.Cells[1, 2].Value = "Nombre Campo Vista";
        worksheet.Cells[1, 3].Value = "Existe";

        int row = 2;
        foreach (var esquema in listasHevd)
        {
            worksheet.Cells[row, 1].Value = esquema.NombreEsquema;
            worksheet.Cells[row, 2].Value = esquema.NombreVista;
            worksheet.Cells[row, 3].Value = esquema.IsValid ? "Sí" : "No";
            row++;
        }

        worksheet.Cells.AutoFitColumns(); // Ajustar automáticamente las columnas

        var fileName = "Esquemas_Export.xlsx";
        var fileBytes = package.GetAsByteArray();
        var fileBase64 = Convert.ToBase64String(fileBytes);

        await JSRuntime.InvokeVoidAsync("downloadExcel", fileName, fileBase64);
    }
    private async Task ExportarPDF()
    {
        if (listasHevd == null || !listasHevd.Any())
        {
            return;
        }

        using var memoryStream = new MemoryStream();
        var document = new Document(iTextSharp.text.PageSize.A4);
        var writer = PdfWriter.GetInstance(document, memoryStream);
        document.Open();

        var font = FontFactory.GetFont(FontFactory.HELVETICA_BOLD, 12);
        var table = new PdfPTable(3) { WidthPercentage = 100 };

        foreach (var header in new[] { "Nombre Campo Esquema", "Nombre Campo Vista", "Existe" })
        {
            table.AddCell(new Phrase(header, font));
        }

        foreach (var esquema in listasHevd)
        {
            table.AddCell(esquema.NombreEsquema ?? "-");
            table.AddCell(esquema.NombreVista ?? "-");
            table.AddCell(esquema.IsValid ? "Sí" : "No");
        }

        document.Add(table);
        document.Close();

        var fileName = "Esquemas_Export.pdf";
        await JSRuntime.InvokeVoidAsync("downloadFile", fileName, "application/pdf", Convert.ToBase64String(memoryStream.ToArray()));
    }
}