@using BlazorBootstrap;
@using Blazored.LocalStorage
@using ClientApp.Services.IService


<Sidebar2 @ref="sidebar"
          Title=@TituloMenu
          BadgeText="v2.1.0"
          DataProvider="Sidebar2DataProvider" />

@code {
    Sidebar2 sidebar;
    IEnumerable<NavItem>? navItems;
    [Inject]
    private ICatalogosService? _Icatalogo { get; set; }

    [Inject]
    ILocalStorageService iLocalStorageService { get; set; }
    private string TituloMenu;

    private async Task<Sidebar2DataProviderResult> Sidebar2DataProvider(Sidebar2DataProviderRequest request)
    {
        if (navItems is null)
            navItems = await GetNavItemsAsync();

        await Task.Delay(2000);
        return await Task.FromResult(request.ApplyTo(navItems));
    }

    private async Task<IEnumerable<NavItem>> GetNavItemsAsync()
    {
        var menuItems = await _Icatalogo.GetMenusAsync();
        TituloMenu = await iLocalStorageService.GetItemAsync<string>(Inicializar.Datos_Menu_Titulo_Local);
        var rol = await iLocalStorageService.GetItemAsync<string>(Inicializar.Datos_Usuario_Codigo_Rol_Local);

        // Definir exclusiones basadas en el rol
        var excludedHrefs = rol switch
        {
            "KEY_USER" => new[] { "/reportecan", "/reporteona", "/reporteread" },
            "KEY_USER_CAN" => new[] { "/reporte1", "/reporteona", "/reporteread" },
            "KEY_USER_ONA" => new[] { "/reporte1", "/reportecan", "/reporteread" },
            "KEY_USER_READ" => new[] { "/reporte1", "/reportecan", "/reporteona" },
            _ => Array.Empty<string>() // Si el rol no coincide con ninguno, no excluye nada
        };

        // Filtrar los elementos del menú basados en las exclusiones
        var filteredMenuItems = menuItems.Where(menu => !excludedHrefs.Contains(menu.href));

        // Transformar los elementos filtrados en NavItem
        var navItems = filteredMenuItems.Select(menu =>
        {
            BlazorBootstrap.IconName iconName = menu.CodigoHomologacion switch
            {
                "KEY_MENU_ONA" => BlazorBootstrap.IconName.PersonFill,
                "KEY_MENU_CON" => BlazorBootstrap.IconName.Link,
                "KEY_MENU_USU" => BlazorBootstrap.IconName.PeopleFill,
                "KEY_MENU_GRU" => BlazorBootstrap.IconName.Diagram2Fill,
                "KEY_MENU_CAM" => BlazorBootstrap.IconName.Columns,
                "KEY_MENU_ESQ" => BlazorBootstrap.IconName.Diagram3Fill,
                "KEY_MENU_VAL" => BlazorBootstrap.IconName.CheckCircleFill,
                "KEY_MENU_SEP" => BlazorBootstrap.IconName.Dash,
                _ => BlazorBootstrap.IconName.QuestionCircleFill
            };

            return new NavItem
                {
                    Id = menu.IdHomologacionMenu.ToString(),
                    Text = menu.MostrarWeb,
                    Href = menu.href,
                    IconName = iconName
                };
        });

        StateHasChanged();
        return navItems;
    }

}