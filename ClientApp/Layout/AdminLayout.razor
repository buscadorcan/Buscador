@inherits LayoutComponentBase
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject ClientApp.Services.ToastService ToastService
@inject ILocalStorageService LocalStorageService
@inject NavigationManager NavigationManager
@using ClientApp.Services.IService
@*
/// <summary>
/// Pagina que se utiliza para poder formar el layout del sistema, es la plantilla general donde se cargaran todas las paginas
/// </summary>

*@

<Toasts class="p-3"
        Messages="ToastService.Messages"
        AutoHide="true"
        Delay="3000"
        Placement="ToastsPlacement.TopRight"
        CreateToastMessageCallback="CreateToastMessage" />

<div class="container-center-horizontal">
    @* <div class=@ClasePage> *@
    <div class="pantalla-inicio screen">
        <div class="menu-adminitrador-can">
            <div class="menu">
                <div class="menu-1 menu-4">
                    <div class="user_button" style="flex-direction: column;">
                        <img class="avatar" src="admin/img/avatar.svg" alt="avatar">
                        <div class="frame-78">
                            <div class="frame-10000023">
                                <div class="alberto-mendez headingheadline5-h5">@nombre @apellidos</div>
                                <div class="frame-10000023">
                                    <div class="frame-1000002371">
                                        <div class="albertonovacerocom bodybody-small">@nombreRol</div>
                                    </div>
                                    <!--
                                    <div style="width:100%;
                                                align-items: center;
                                                display: flex;
                                                flex-direction: column;
                                                position: relative;
                                                ">
                                        <Button Class="btn" style="width:100%; 
                                                font-family: var(--font-family-inter-semibold);
                                                font-size: var(--font-size-m);
                                                font-style: normal;
                                                font-weight: 600;
                                                letter-spacing: 0;"
                                                @onclick="() => SalirSesion()"        
                                        >Salir</Button>
                                    </div>
                                    -->
                                </div>
                            </div>
                            <img class="expand_more" src="admin/img/expand-more@2x.png" alt="expand_more">
                        </div>
                    </div>
                    <div class="men">
                        <div class="men-1">
                            <div class="inicio-1">
                                <a href="/administracion" class="inicio-2" style="cursor: pointer; text-decoration: none; color: inherit;">
                                    <img class="material-symbols-lig" src="admin/img/material-symbols-light-home-outline-rounded.svg" alt="material-symbols-light:home-outline-rounded">
                                    <div class="inicio-3 valign-text-middle headingheadline5-h5">Inicio</div>
                                </a>

                                <div class="perfiles">
                                    <div class="titulo"><div class="inicio valign-text-middle bodysmall-600">Perfiles</div></div>
                                    @if (navItems?.Any() == true)
                                    {
                                        @foreach (var item in navItems)
                                        {
                                            if (item.CodigoHomologacion == "KEY_MENU_ONA" ||
                                            item.CodigoHomologacion == "KEY_MENU_USU" ||
                                            item.CodigoHomologacion == "KEY_MENU_REP_EST")
                                            {
                                                <div class="campos">
                                                    <img class="bibuilding" src="@item.Icono" alt="Icono" />
                                                    <NavLink href="@item.NavItem.Href" class="place valign-text-middle headingheadline5-h5">@item.NavItem.Text</NavLink>
                                                </div>
                                            }
                                        }
                                    }
                                    else
                                    {
                                        <p class="label valign-text-middle inter-regular-normal-comet-14px">Cargando menú...</p>
                                    }
                                </div>
                            </div>
                            <div class="homologacin">
                                <div class="titulo"><div class="inicio valign-text-middle bodysmall-600">Homologación</div></div>
                                <div class="menu-2 menu-4">
                                    @if (navItems?.Any() == true)
                                    {
                                        @foreach (var item in navItems)
                                        {
                                            if (item.CodigoHomologacion != "KEY_MENU_ONA" && item.CodigoHomologacion != "KEY_MENU_USU" && item.CodigoHomologacion != "KEY_MENU_REP_EST")
                                            {
                                                <div class="campos">
                                                    <img class="bibuilding" src="@item.Icono" alt="Icono" />
                                                    <NavLink href="@item.NavItem.Href" class="place valign-text-middle headingheadline5-h5">
                                                        @item.NavItem.Text
                                                    </NavLink>
                                                </div>
                                            }   
                                        }
                                    }
                                    else
                                    {
                                        <p class="label valign-text-middle inter-regular-normal-comet-14px">Cargando menú...</p>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="ayuda">
                    <div class="menu-3 menu-4">
                        <img class="help" src="admin/img/help.svg" alt="help">
                        <NavLink class="nav-link ayuda-1 valign-text-middle headingheadline5-h5" href="salir">
                            <span class="p-2">
                                Salir
                            </span>
                        </NavLink>
                        @* <div class="ayuda-1 valign-text-middle headingheadline5-h5">

                        </div> *@
                    </div>
                </div>
            </div>
        </div>

        @inject NavigationManager NavigationManager

        @if (NavigationManager.Uri.Contains("/administracion"))
        {
            <div class="banner">
                <div class="top">
                    <img class="logo" src="admin/img/logo.svg" alt="logo">
                    <img class="vector-1" src="admin/img/vector-1.png" alt="vector 1">
                </div>
            </div>

        }
        else
        {

            <div class="general flex-col">
                <div class="general top">
                    <div class="general overlap-group">
                        <img class="general vector-1" src="admin/img/vector-1-1.png" alt="vector 1">
                        <img class="general frame" src="admin/img/frame-1.svg" alt="Frame">
                    </div>
                </div>
                
                  @if (NavigationManager.Uri.Contains("/reportecan") ||
                  NavigationManager.Uri.Contains("/reporteona") ||
                  NavigationManager.Uri.Contains("/reporteread") ||
                  NavigationManager.Uri.Contains("/reporte1"))
                {
                    <link href="css/admin-report.css" rel="stylesheet">

                    <div class="">
                        @Body
                    </div>
                }
                else
                {
                    <link href="css/admin.css" rel="stylesheet">
                    <link href="css/pagination.css" rel="stylesheet">
                    <link href="css/modal-footer.css" rel="stylesheet">
                    <link href="css/btn-export.css" rel="stylesheet">
                    <link href="css/activo-inactivo.css" rel="stylesheet">
                    <link href="css/table-header.css" rel="stylesheet">
                    <link href="css/table-body.css" rel="stylesheet">
                    <link href="css/input-file.css" rel="stylesheet">
                    <link href="css/custom-dropdown.css" rel="stylesheet">
                    <div class="general main-container">
                        @Body
                    </div>
                }

            </div>

        }
    </div>

</div>

@code {
    private bool IsSidebarVisible { get; set; } = true;
    private bool IsSubMenuVisible { get; set; } = false;

    private string SidebarClass => IsSidebarVisible ? "" : "hidden";
    private string SidebarToggleText => IsSidebarVisible ? "Ocultar Menú" : "Mostrar Menú";

    private string SubMenuClass => IsSubMenuVisible ? "show" : "";

    // Obtención de datos desde LocalStorage
    private int rol;
    private string nombreRol;
    private string nombre;
    private string apellidos;
    private string codigoRol;

    protected override async Task OnInitializedAsync()
    {
        
        codigoRol = await LocalStorageService.GetItemAsync<string>(Inicializar.Datos_Usuario_Codigo_Rol_Local);

        if (codigoRol == "KEY_USER_CAN")
        {
            nombreRol = await LocalStorageService.GetItemAsync<string>(Inicializar.Datos_Usuario_Nombre_Rol_Local);
        }
        else if (codigoRol == "KEY_USER_ONA")
        {
            nombreRol = await LocalStorageService.GetItemAsync<string>(Inicializar.Datos_Usuario_Nombre_Rol_Local);
        }
        else if (codigoRol == "KEY_USER_READ")
        {
            nombreRol = await LocalStorageService.GetItemAsync<string>(Inicializar.Datos_Usuario_Nombre_Rol_Local);
        }
        else
        {
            nombreRol = await LocalStorageService.GetItemAsync<string>(Inicializar.Datos_Usuario_Nombre_Rol_Local);
        }

        nombre = await LocalStorageService.GetItemAsync<string>(Inicializar.Datos_Usuario_Nombre_Local);
        apellidos = await LocalStorageService.GetItemAsync<string>(Inicializar.Datos_Usuario_Apellido_Local);

        // if (navItems is null || navItems.Count == 0)

        navItems = await GetNavItemsAsync();

        await Task.Delay(2000);
    }

    private void ToggleSidebar()
    {
        IsSidebarVisible = !IsSidebarVisible;
    }

    private void ToggleSubMenu()
    {
        IsSubMenuVisible = !IsSubMenuVisible;
    }
}

@code {
    Sidebar2 sidebar;

    [Inject]
    private ICatalogosService? _Icatalogo { get; set; }

    [Inject]
    ILocalStorageService iLocalStorageService { get; set; }

    private string TituloMenu;
    private string ClasePage;
    private string PathIconMenu;

    [Parameter] public EventCallback<List<NavItem>> OnNavItemsChanged { get; set; } 

    // private IEnumerable<NavItem>? navItems = new List<NavItem>();
    private IEnumerable<CustomNavItem>? navItems = new List<CustomNavItem>();


    private async Task<Sidebar2DataProviderResult> Sidebar2DataProvider(Sidebar2DataProviderRequest request)
    {
        // if (navItems is null)
        //     navItems = await GetNavItemsAsync();

        // await Task.Delay(2000);
        // return await Task.FromResult(request.ApplyTo(navItems));
        if (navItems is null)
            navItems = await GetNavItemsAsync();

        await Task.Delay(2000);
        // Si el método ApplyTo espera una lista de NavItem, se extrae la propiedad NavItem de cada CustomNavItem:
        var navItemsBase = navItems.Select(c => c.NavItem).ToList();
        return await Task.FromResult(request.ApplyTo(navItemsBase));
    }
    public class CustomNavItem
    {
        public NavItem NavItem { get; set; }
        public string CodigoHomologacion { get; set; }
        public string Icono { get; set; }

        public CustomNavItem(NavItem navItem, string codigoHomologacion, string icono)
        {
            NavItem = navItem;
            CodigoHomologacion = codigoHomologacion;
            Icono = icono;
        }
    }
    private async Task<IEnumerable<CustomNavItem>> GetNavItemsAsync()
    {
        // Se obtiene la ruta base del icono desde LocalStorage o se usa un valor por defecto.
        PathIconMenu = await iLocalStorageService.GetItemAsync<string>(Inicializar.Datos_Menu_PathIconAppSetting) ?? "admin/img/";
        // Obtener los elementos del menú desde la API o servicio.
        var menuItems = await _Icatalogo.GetMenusAsync();

        // Obtener el título del menú y el rol del usuario desde LocalStorage.
        TituloMenu = await iLocalStorageService.GetItemAsync<string>(Inicializar.Datos_Menu_Titulo_Local);
        var rol = await iLocalStorageService.GetItemAsync<string>(Inicializar.Datos_Usuario_Codigo_Rol_Local);

        // Filtrar elementos del menú donde el rol del usuario esté en CodigoHomologacionRol.
        var filteredMenuItems = menuItems
            .Where(menu =>
                !string.IsNullOrEmpty(menu.CodigoHomologacionRol) &&
                menu.CodigoHomologacionRol.Split(',')
                    .Select(r => r.Trim())
                    .Contains(rol))
            .OrderBy(menu => menu.MostrarWebOrden)
            .ToList();

        // Convertir los elementos filtrados en objetos CustomNavItem
        var customNavItems = filteredMenuItems.Select(menu =>
        {
            // Mapear a un valor del enum IconName de BlazorBootstrap.
            BlazorBootstrap.IconName iconName = menu.CodigoHomologacion switch
            {
                "KEY_MENU_ONA" => BlazorBootstrap.IconName.PersonFill,
                "KEY_MENU_CON" => BlazorBootstrap.IconName.Link,
                "KEY_MENU_USU" => BlazorBootstrap.IconName.PeopleFill,
                "KEY_MENU_GRU" => BlazorBootstrap.IconName.Diagram2Fill,
                "KEY_MENU_CAM" => BlazorBootstrap.IconName.Columns,
                "KEY_MENU_ESQ" => BlazorBootstrap.IconName.Diagram3Fill,
                "KEY_MENU_VAL" => BlazorBootstrap.IconName.CheckCircleFill,
                "KEY_MENU_SEP" => BlazorBootstrap.IconName.Dash,
                _ => BlazorBootstrap.IconName.QuestionCircleFill
            };

            // Crear el objeto NavItem (del ensamblado BlazorBootstrap)
            var navItem = new NavItem
                {
                    Id = "", // O menu.IdHomologacionMenu.ToString() si lo necesitas
                    Text = menu.MostrarWeb,
                    Href = menu.href,
                    IconName = iconName
                };

            // Concatenar la ruta base con el nombre del archivo para obtener la ruta completa del icono.
            // fullIconPath hace referencia a Icono de vista vwMenu
            string fullIconPath = $"{PathIconMenu}{menu.Icono}";
            // Retornar el CustomNavItem con el NavItem original, el código de homologación y la ruta completa del icono.
            return new CustomNavItem(navItem, menu.CodigoHomologacion, fullIconPath);
        }).ToList();

        // Si necesitas enviar la lista de navegación a otro componente (por ejemplo, AdminLayout),
        // puedes enviar la lista de NavItem extraída de los CustomNavItem.
        await OnNavItemsChanged.InvokeAsync(customNavItems.Select(c => c.NavItem).ToList());

        return customNavItems;
    }

    // private async Task<IEnumerable<NavItem>> GetNavItemsAsync()
    // {
    //     PathIconMenu = await iLocalStorageService.GetItemAsync<string>(Inicializar.Datos_Menu_PathIconAppSetting)  ?? "admin/img/"; 
    //     // Obtener los elementos del menú desde la API o servicio.
    //     var menuItems = await _Icatalogo.GetMenusAsync();

    //     // Obtener el título del menú y el rol del usuario desde localStorage.
    //     TituloMenu = await iLocalStorageService.GetItemAsync<string>(Inicializar.Datos_Menu_Titulo_Local);
    //     var rol = await iLocalStorageService.GetItemAsync<string>(Inicializar.Datos_Usuario_Codigo_Rol_Local);

    //     // Filtrar elementos del menú donde el rol del usuario esté en CodigoHomologacionRol.
    //     var filteredMenuItems = menuItems
    //         .Where(menu =>
    //             !string.IsNullOrEmpty(menu.CodigoHomologacionRol) && // Evitar valores nulos o vacíos
    //             menu.CodigoHomologacionRol.Split(',')
    //                 .Select(r => r.Trim()) // Eliminar espacios en blanco
    //                 .Contains(rol)) // Comparar con el rol actual
    //         .OrderBy(menu => menu.MostrarWebOrden) // Ordenar por MostrarWebOrden
    //         .ToList();

    //     // Convertir los elementos filtrados en objetos NavItem
    //     var navItemsList = filteredMenuItems.Select(menu =>
    //     {
    //         BlazorBootstrap.IconName iconName = menu.CodigoHomologacion switch
    //         {
    //             "KEY_MENU_ONA" => BlazorBootstrap.IconName.PersonFill,
    //             "KEY_MENU_CON" => BlazorBootstrap.IconName.Link,
    //             "KEY_MENU_USU" => BlazorBootstrap.IconName.PeopleFill,
    //             "KEY_MENU_GRU" => BlazorBootstrap.IconName.Diagram2Fill,
    //             "KEY_MENU_CAM" => BlazorBootstrap.IconName.Columns,
    //             "KEY_MENU_ESQ" => BlazorBootstrap.IconName.Diagram3Fill,
    //             "KEY_MENU_VAL" => BlazorBootstrap.IconName.CheckCircleFill,
    //             "KEY_MENU_SEP" => BlazorBootstrap.IconName.Dash,
    //             _ => BlazorBootstrap.IconName.QuestionCircleFill
    //         };

    //         return new NavItem
    //             {
    //                 Id = "", //menu.IdHomologacionMenu.ToString(),
    //                 Text = menu.MostrarWeb,
    //                 Href = menu.href,
    //                 IconName = iconName,
    //             };
    //     }).ToList();

    //     // 🔹 Enviar la lista de navegación actualizada a AdminLayout.razor
    //     await OnNavItemsChanged.InvokeAsync(navItemsList);

    //     return navItemsList;
    // }


    private void SalirSesion() { 
        try
        {

        }
        catch
        {
            throw;
        }
    }

}

