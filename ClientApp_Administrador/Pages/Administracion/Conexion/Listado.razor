@attribute [Route(Routes.CONEXION)]
@layout AdminLayout
@using OfficeOpenXml
@using SharedApp.Dtos
@inject IJSRuntime JSRuntime
@using System.IO
@using System.Text
@using iTextSharp.text
@using iTextSharp.text.pdf

@*
    /// <summary>
    /// Page: Listado Formulario Conexion
    /// Concepto: Listado de conexiones externas del programa para editar o registar.
    /// Tipo: EXCEL, MSSQLSERVER, MYSQL, POSTGREST, SQLLITE
    /// </summary>
*@

@if (IsLoading)
{
    <div class="overlay">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
        <div class="progress mt-2" style="width: 100%;">
            <div class="progress-bar progress-bar-striped progress-bar-animated bg-info" role="progressbar" style="width: @ProgressValue%;" aria-valuenow="@ProgressValue" aria-valuemin="0" aria-valuemax="100"></div>
        </div>
        <p class="label valign-text-middle inter-regular-normal-comet-14px">Procesando migración, por favor espere...</p>
    </div>
}


<Toasts class="p-3" Messages="messages" Placement="@toastsPlacement" />
<PageTitle>Homologación</PageTitle>
<Toasts class="p-3" Messages="messages" Placement="@toastsPlacement" />

    <div class="general title">
    <h2 class="title headlineheadline2-h2">Conexiones Existentes</h2>
    </div>

<div class="text-end my-3 d-flex justify-content-between">
    <!-- Grupo de botones de exportación -->
    <div class="d-flex gap-2">
        <!-- Botón Exportar a Excel -->
        <Button id="btnExportarExcel" Type="ButtonType.Button" Color="ButtonColor.Primary" Outline="true" @onclick="ExportarExcel">
            <Icon Name="IconName.FileEarmarkArrowDown" />
            <span class="ms-2 btnExp">Exportar a Excel</span>
        </Button>

        <!-- Botón Exportar a PDF -->
        <Button id="btnExportarPDF" Type="ButtonType.Button" Color="ButtonColor.Danger" Outline="true" @onclick="ExportarPDF">
            <Icon Name="IconName.FileEarmarkPdf" />
            <span class="ms-2 btnExp">Exportar a PDF</span>
        </Button>
    </div>

    <!-- Botón Agregar Registro -->
    <div class="button-container">
        <Button Type="ButtonType.Link" class="button-2" To="/nuevo-conexion">
            <div class="button-3 headingheadline4-h4">Agregar Registro</div>
        </Button>
    </div>
</div>

<div class="table table-1">
    <div class="table-heading table-1">
        <!-- Encabezados con funcionalidad de ordenamiento -->
        @foreach (var column in new[]
        {
            (nameof(ONAConexionDto.Host), "Host"),
            (nameof(ONAConexionDto.Puerto), "Puerto"),
            (nameof(ONAConexionDto.Usuario), "Usuario"),
            (nameof(ONAConexionDto.BaseDatos), "Base Datos"),
            (nameof(ONAConexionDto.OrigenDatos), "Origen Datos"),
            (nameof(ONAConexionDto.Migrar), "Migrar"),
            (nameof(ONAConexionDto.Estado), "Estado")
        })
        {
            <div class="table-heading-1 table-heading-10 sortable-header" @onclick="() => OrdenarPor(column.Item1)">
                <div class="header-label-1 header-label-4">
                    <div class="label-heading headingheadline5-h5">
                        @column.Item2 @(sortColumn == column.Item1 ? (sortAscending ? "⬆" : "⬇") : "")
                    </div>
                </div>
            </div>
        }

        <!-- Columnas sin ordenamiento -->
        <div class="table-heading-1 table-heading-10">
            <div class="header-label-1 header-label-4">
                <div class="label-heading headingheadline5-h5">Probar Conexion</div>
            </div>
        </div>
        <div class="table-heading-1 table-heading-10" style="margin-left:1%">
            <div class="header-label-1 header-label-4">
                <div class="label-heading headingheadline5-h5">Migracion</div>
            </div>
        </div>
        <div class="table-heading-1 table-heading-10">
            <div class="header-label-1 header-label-4">
                <div class="label-heading headingheadline5-h5">Editar</div>
            </div>
        </div>
        <div class="table-heading-1 table-heading-10">
            <div class="header-label-1 header-label-4">
                <div class="label-heading headingheadline5-h5">Eliminar</div>
            </div>
        </div>
    </div>

    @if (listasHevd != null && listasHevd.Any())
    {
        <div class="content content-2">
            @foreach (var conexion in PaginatedItems)
            {
                <div class="row row-15">
                    <div class="componente">
                        <div class="row-1 row-15">
                            <div class="ads-rules-list">
                                <div class="cell cell-1"><div class="cell-text cell-1 bodybody-small">@conexion.Host</div></div>
                                <div class="cell cell-1"><div class="cell-text cell-1 bodybody-small">@conexion.Puerto</div></div>
                                <div class="cell cell-1"><div class="cell-text cell-1 bodybody-small">@conexion.Usuario</div></div>
                                <div class="cell cell-1"><div class="cell-text cell-1 bodybody-small">@conexion.BaseDatos</div></div>
                                <div class="cell cell-1"><div class="cell-text cell-1 bodybody-small">@conexion.OrigenDatos</div></div>

                                <!-- Estado con Check o X -->
                                <div class="cell cell-1">
                                    @if (conexion.Migrar == "S")
                                    {
                                        <span class="estado-activo">✔</span>
                                    }
                                    else
                                    {
                                        <span class="estado-inactivo">✖</span>
                                    }
                                </div>

                                <div class="cell cell-1">
                                    @if (conexion.Estado == "A")
                                    {
                                        <span class="estado-activo">✔</span>
                                    }
                                    else
                                    {
                                        <span class="estado-inactivo">✖</span>
                                    }
                                </div>

                                <div class="cell cell-1">
                                    @if (conexion.OrigenDatos != "EXCEL")
                                    {
                                        <Button Color="ButtonColor.Info" Outline="true" @onclick="async () => await OnTestconexionClick(conexion.IdONA)" Size="ButtonSize.Small">
                                            <Icon Name="IconName.RCircle" />
                                        </Button>
                                    }
                                </div>

                                <div class="cell cell-1">
                                    @if (conexion.OrigenDatos != "EXCEL")
                                    {
                                        <Button Color="ButtonColor.Info" Outline="true" @onclick="async () => await OnMigrarClick(conexion.IdONA)" Size="ButtonSize.Small">
                                            <Icon Name="IconName.DatabaseAdd" />
                                        </Button>
                                    }
                                </div>

                                <div class="cell cell-1">
                                    <Button Type="ButtonType.Link" Color="ButtonColor.Secondary" Outline="true" To="@($"/editar-conexion/{conexion.IdONA}")" Size="ButtonSize.Small">
                                        <Icon Name="IconName.PencilSquare" />
                                    </Button>
                                </div>

                                <div class="cell cell-1">
                                    <Button Color="ButtonColor.Danger" Outline="true" @onclick=@(() => OpenDeleteModal(conexion.IdONA)) Size="ButtonSize.Small">
                                        <Icon Name="IconName.Trash3" />
                                    </Button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        <!-- Controles de paginación -->
        <div class="pagination-container">
            <button class="btn btn-primary btn-sm" @onclick="PreviousPage" disabled="@(!CanGoPrevious)">
                ⏪
            </button>

            <span class="pagination-text inter-regular-normal-comet-14px">Página @CurrentPage de @TotalPages</span>

            <button class="btn btn-primary btn-sm" @onclick="NextPage" disabled="@(!CanGoNext)">
                ⏩
            </button>
        </div>
    }
    else
    {
        <p class="label valign-text-middle inter-regular-normal-comet-16px">No hay datos disponibles.</p>
    }
</div>

@if (showModal)
{
    <div class="modal show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title inter-regular-normal-comet-14px">Confirmar Eliminación</h5>
                    <button type="button" class="btn-close inter-regular-normal-comet-14px" aria-label="Close"
                            @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <p class="label valign-text-middle inter-regular-normal-comet-14px">¿Está seguro que desea eliminar este registro?</p>
                </div>
                <div class="modal-footer">
                    <Button id="btnEliminar" Color="ButtonColor.Danger" @onclick=@(() => ConfirmDelete())>Eliminar</Button>
                    <Button Color="ButtonColor.Secondary" @onclick=@(() => CloseModal())>Cancelar</Button>
                </div>
            </div>
        </div>
    </div>
}